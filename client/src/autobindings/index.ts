// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

// This was generated using spacetimedb cli version 1.2.0 (commit fb41e50eb73573b70eea532aeb6158eaac06fae0).

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  Identity,
  ProductType,
  ProductTypeElement,
  SubscriptionBuilderImpl,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
  type CallReducerFlags,
  type DbContext,
  type ErrorContextInterface,
  type Event,
  type EventContextInterface,
  type ReducerEventContextInterface,
  type SubscriptionEventContextInterface,
} from "@clockworklabs/spacetimedb-sdk";

// Import and reexport all reducer arg types
import { AdminAddCurse } from "./admin_add_curse_reducer.ts";
export { AdminAddCurse };
import { AdminClearCurses } from "./admin_clear_curses_reducer.ts";
export { AdminClearCurses };
import { ChangeMonsterState } from "./change_monster_state_reducer.ts";
export { ChangeMonsterState };
import { CheckAgnaRitualCompletion } from "./check_agna_ritual_completion_reducer.ts";
export { CheckAgnaRitualCompletion };
import { ChooseUpgrade } from "./choose_upgrade_reducer.ts";
export { ChooseUpgrade };
import { CleanupActiveAttack } from "./cleanup_active_attack_reducer.ts";
export { CleanupActiveAttack };
import { CleanupMonsterHitRecord } from "./cleanup_monster_hit_record_reducer.ts";
export { CleanupMonsterHitRecord };
import { ClientConnected } from "./client_connected_reducer.ts";
export { ClientConnected };
import { DebugCheckGemDrops } from "./debug_check_gem_drops_reducer.ts";
export { DebugCheckGemDrops };
import { DebugCheckTier } from "./debug_check_tier_reducer.ts";
export { DebugCheckTier };
import { DebugEnableBotPvp } from "./debug_enable_bot_pvp_reducer.ts";
export { DebugEnableBotPvp };
import { DebugSetBossType } from "./debug_set_boss_type_reducer.ts";
export { DebugSetBossType };
import { DebugSetSuperHealth } from "./debug_set_super_health_reducer.ts";
export { DebugSetSuperHealth };
import { ExpireMonsterAttack } from "./expire_monster_attack_reducer.ts";
export { ExpireMonsterAttack };
import { GameTick } from "./game_tick_reducer.ts";
export { GameTick };
import { HandleAttackBurstCooldown } from "./handle_attack_burst_cooldown_reducer.ts";
export { HandleAttackBurstCooldown };
import { InitAttackData } from "./init_attack_data_reducer.ts";
export { InitAttackData };
import { InitHealthRegenSystem } from "./init_health_regen_system_reducer.ts";
export { InitHealthRegenSystem };
import { LoadBuild } from "./load_build_reducer.ts";
export { LoadBuild };
import { PreSpawnMonsterWave } from "./pre_spawn_monster_wave_reducer.ts";
export { PreSpawnMonsterWave };
import { ProcessHealthRegen } from "./process_health_regen_reducer.ts";
export { ProcessHealthRegen };
import { RerollUpgrades } from "./reroll_upgrades_reducer.ts";
export { RerollUpgrades };
import { ResetWorld } from "./reset_world_reducer.ts";
export { ResetWorld };
import { SaveBuild } from "./save_build_reducer.ts";
export { SaveBuild };
import { ServerTriggerAttack } from "./server_trigger_attack_reducer.ts";
export { ServerTriggerAttack };
import { SetName } from "./set_name_reducer.ts";
export { SetName };
import { SetPlayerPvpMode } from "./set_player_pvp_mode_reducer.ts";
export { SetPlayerPvpMode };
import { SetPlayerWaypoint } from "./set_player_waypoint_reducer.ts";
export { SetPlayerWaypoint };
import { SpawnAgnaCandle } from "./spawn_agna_candle_reducer.ts";
export { SpawnAgnaCandle };
import { SpawnAgnaSummoningCircle } from "./spawn_agna_summoning_circle_reducer.ts";
export { SpawnAgnaSummoningCircle };
import { SpawnBossForTesting } from "./spawn_boss_for_testing_reducer.ts";
export { SpawnBossForTesting };
import { SpawnBossPhaseOne } from "./spawn_boss_phase_one_reducer.ts";
export { SpawnBossPhaseOne };
import { SpawnBossPhaseTwoDelayed } from "./spawn_boss_phase_two_delayed_reducer.ts";
export { SpawnBossPhaseTwoDelayed };
import { SpawnBot } from "./spawn_bot_reducer.ts";
export { SpawnBot };
import { SpawnDebugLootCapsule } from "./spawn_debug_loot_capsule_reducer.ts";
export { SpawnDebugLootCapsule };
import { SpawnDebugLoreScroll } from "./spawn_debug_lore_scroll_reducer.ts";
export { SpawnDebugLoreScroll };
import { SpawnDebugSpecialGem } from "./spawn_debug_special_gem_reducer.ts";
export { SpawnDebugSpecialGem };
import { SpawnDebugVoidChest } from "./spawn_debug_void_chest_reducer.ts";
export { SpawnDebugVoidChest };
import { SpawnDelayedAgnaFireOrb } from "./spawn_delayed_agna_fire_orb_reducer.ts";
export { SpawnDelayedAgnaFireOrb };
import { SpawnEnderClawWave } from "./spawn_ender_claw_wave_reducer.ts";
export { SpawnEnderClawWave };
import { SpawnEnderScytheSpawns } from "./spawn_ender_scythe_spawns_reducer.ts";
export { SpawnEnderScytheSpawns };
import { SpawnEnderScythes } from "./spawn_ender_scythes_reducer.ts";
export { SpawnEnderScythes };
import { SpawnGuaranteedVoidChest } from "./spawn_guaranteed_void_chest_reducer.ts";
export { SpawnGuaranteedVoidChest };
import { SpawnLootCapsule } from "./spawn_loot_capsule_reducer.ts";
export { SpawnLootCapsule };
import { SpawnMonster } from "./spawn_monster_reducer.ts";
export { SpawnMonster };
import { SpawnPlayer } from "./spawn_player_reducer.ts";
export { SpawnPlayer };
import { TransitionDeadToChoosingClass } from "./transition_dead_to_choosing_class_reducer.ts";
export { TransitionDeadToChoosingClass };
import { TransitionWinnerToChoosingClass } from "./transition_winner_to_choosing_class_reducer.ts";
export { TransitionWinnerToChoosingClass };
import { TriggerAgnaCandleBolt } from "./trigger_agna_candle_bolt_reducer.ts";
export { TriggerAgnaCandleBolt };
import { TriggerAgnaFireOrbAttack } from "./trigger_agna_fire_orb_attack_reducer.ts";
export { TriggerAgnaFireOrbAttack };
import { TriggerAgnaFlamethrowerAttack } from "./trigger_agna_flamethrower_attack_reducer.ts";
export { TriggerAgnaFlamethrowerAttack };
import { TriggerAgnaPhase2FlamethrowerAttack } from "./trigger_agna_phase_2_flamethrower_attack_reducer.ts";
export { TriggerAgnaPhase2FlamethrowerAttack };
import { TriggerAgnaTargetSwitch } from "./trigger_agna_target_switch_reducer.ts";
export { TriggerAgnaTargetSwitch };
import { TriggerBossTargetSwitch } from "./trigger_boss_target_switch_reducer.ts";
export { TriggerBossTargetSwitch };
import { TriggerChaosBallAttack } from "./trigger_chaos_ball_attack_reducer.ts";
export { TriggerChaosBallAttack };
import { TriggerEnderBoltAttack } from "./trigger_ender_bolt_attack_reducer.ts";
export { TriggerEnderBoltAttack };
import { TriggerImpAttack } from "./trigger_imp_attack_reducer.ts";
export { TriggerImpAttack };
import { TriggerVoidZoneAttack } from "./trigger_void_zone_attack_reducer.ts";
export { TriggerVoidZoneAttack };
import { UpdateLastLogin } from "./update_last_login_reducer.ts";
export { UpdateLastLogin };

// Import and reexport all table handle types
import { AccountTableHandle } from "./account_table.ts";
export { AccountTableHandle };
import { ActiveAttackCleanupTableHandle } from "./active_attack_cleanup_table.ts";
export { ActiveAttackCleanupTableHandle };
import { ActiveAttacksTableHandle } from "./active_attacks_table.ts";
export { ActiveAttacksTableHandle };
import { ActiveMonsterAttacksTableHandle } from "./active_monster_attacks_table.ts";
export { ActiveMonsterAttacksTableHandle };
import { AgnaCandleBoltSchedulerTableHandle } from "./agna_candle_bolt_scheduler_table.ts";
export { AgnaCandleBoltSchedulerTableHandle };
import { AgnaCandleSchedulerTableHandle } from "./agna_candle_scheduler_table.ts";
export { AgnaCandleSchedulerTableHandle };
import { AgnaCandleSpawnsTableHandle } from "./agna_candle_spawns_table.ts";
export { AgnaCandleSpawnsTableHandle };
import { AgnaDelayedOrbSchedulerTableHandle } from "./agna_delayed_orb_scheduler_table.ts";
export { AgnaDelayedOrbSchedulerTableHandle };
import { AgnaFireOrbSchedulerTableHandle } from "./agna_fire_orb_scheduler_table.ts";
export { AgnaFireOrbSchedulerTableHandle };
import { AgnaFlamethrowerSchedulerTableHandle } from "./agna_flamethrower_scheduler_table.ts";
export { AgnaFlamethrowerSchedulerTableHandle };
import { AgnaMagicCirclesTableHandle } from "./agna_magic_circles_table.ts";
export { AgnaMagicCirclesTableHandle };
import { AgnaPhase2FlamethrowerSchedulerTableHandle } from "./agna_phase_2_flamethrower_scheduler_table.ts";
export { AgnaPhase2FlamethrowerSchedulerTableHandle };
import { AgnaRitualCompletionCheckTableHandle } from "./agna_ritual_completion_check_table.ts";
export { AgnaRitualCompletionCheckTableHandle };
import { AgnaSummoningCircleSpawnerTableHandle } from "./agna_summoning_circle_spawner_table.ts";
export { AgnaSummoningCircleSpawnerTableHandle };
import { AgnaTargetSwitchSchedulerTableHandle } from "./agna_target_switch_scheduler_table.ts";
export { AgnaTargetSwitchSchedulerTableHandle };
import { AttackBurstCooldownsTableHandle } from "./attack_burst_cooldowns_table.ts";
export { AttackBurstCooldownsTableHandle };
import { AttackDataTableHandle } from "./attack_data_table.ts";
export { AttackDataTableHandle };
import { BestiaryTableHandle } from "./bestiary_table.ts";
export { BestiaryTableHandle };
import { BossAgnaLastPatternsTableHandle } from "./boss_agna_last_patterns_table.ts";
export { BossAgnaLastPatternsTableHandle };
import { BossEnderLastPatternsTableHandle } from "./boss_ender_last_patterns_table.ts";
export { BossEnderLastPatternsTableHandle };
import { BossPhaseTwoTimerTableHandle } from "./boss_phase_two_timer_table.ts";
export { BossPhaseTwoTimerTableHandle };
import { BossSelectionTableHandle } from "./boss_selection_table.ts";
export { BossSelectionTableHandle };
import { BossSpawnTimerTableHandle } from "./boss_spawn_timer_table.ts";
export { BossSpawnTimerTableHandle };
import { BossTargetSwitchSchedulerTableHandle } from "./boss_target_switch_scheduler_table.ts";
export { BossTargetSwitchSchedulerTableHandle };
import { ChaosBallSchedulerTableHandle } from "./chaos_ball_scheduler_table.ts";
export { ChaosBallSchedulerTableHandle };
import { ChosenUpgradesTableHandle } from "./chosen_upgrades_table.ts";
export { ChosenUpgradesTableHandle };
import { ClassDataTableHandle } from "./class_data_table.ts";
export { ClassDataTableHandle };
import { ConfigTableHandle } from "./config_table.ts";
export { ConfigTableHandle };
import { CursesTableHandle } from "./curses_table.ts";
export { CursesTableHandle };
import { DeadPlayerTransitionTimerTableHandle } from "./dead_player_transition_timer_table.ts";
export { DeadPlayerTransitionTimerTableHandle };
import { DeadPlayersTableHandle } from "./dead_players_table.ts";
export { DeadPlayersTableHandle };
import { EnderBoltSchedulerTableHandle } from "./ender_bolt_scheduler_table.ts";
export { EnderBoltSchedulerTableHandle };
import { EnderClawSpawnerTableHandle } from "./ender_claw_spawner_table.ts";
export { EnderClawSpawnerTableHandle };
import { EnderScytheSchedulerTableHandle } from "./ender_scythe_scheduler_table.ts";
export { EnderScytheSchedulerTableHandle };
import { EnderScytheSpawnSchedulerTableHandle } from "./ender_scythe_spawn_scheduler_table.ts";
export { EnderScytheSpawnSchedulerTableHandle };
import { EntityTableHandle } from "./entity_table.ts";
export { EntityTableHandle };
import { ExpConfigTableHandle } from "./exp_config_table.ts";
export { ExpConfigTableHandle };
import { FoundLoreScrollsTableHandle } from "./found_lore_scrolls_table.ts";
export { FoundLoreScrollsTableHandle };
import { GameStateTableHandle } from "./game_state_table.ts";
export { GameStateTableHandle };
import { GameTickTimerTableHandle } from "./game_tick_timer_table.ts";
export { GameTickTimerTableHandle };
import { GemsTableHandle } from "./gems_table.ts";
export { GemsTableHandle };
import { GuaranteedVoidChestSpawnsTableHandle } from "./guaranteed_void_chest_spawns_table.ts";
export { GuaranteedVoidChestSpawnsTableHandle };
import { HealthRegenSchedulerTableHandle } from "./health_regen_scheduler_table.ts";
export { HealthRegenSchedulerTableHandle };
import { ImpAttackSchedulerTableHandle } from "./imp_attack_scheduler_table.ts";
export { ImpAttackSchedulerTableHandle };
import { LootCapsulesTableHandle } from "./loot_capsules_table.ts";
export { LootCapsulesTableHandle };
import { MonsterDamageTableHandle } from "./monster_damage_table.ts";
export { MonsterDamageTableHandle };
import { MonsterHitCleanupTableHandle } from "./monster_hit_cleanup_table.ts";
export { MonsterHitCleanupTableHandle };
import { MonsterSpawnTimerTableHandle } from "./monster_spawn_timer_table.ts";
export { MonsterSpawnTimerTableHandle };
import { MonsterSpawnersTableHandle } from "./monster_spawners_table.ts";
export { MonsterSpawnersTableHandle };
import { MonsterStateChangesTableHandle } from "./monster_state_changes_table.ts";
export { MonsterStateChangesTableHandle };
import { MonstersTableHandle } from "./monsters_table.ts";
export { MonstersTableHandle };
import { MonstersBoidTableHandle } from "./monsters_boid_table.ts";
export { MonstersBoidTableHandle };
import { PlayerTableHandle } from "./player_table.ts";
export { PlayerTableHandle };
import { PlayerScheduledAttacksTableHandle } from "./player_scheduled_attacks_table.ts";
export { PlayerScheduledAttacksTableHandle };
import { SavedAttacksTableHandle } from "./saved_attacks_table.ts";
export { SavedAttacksTableHandle };
import { SavedBuildTableHandle } from "./saved_build_table.ts";
export { SavedBuildTableHandle };
import { UpgradeOptionsTableHandle } from "./upgrade_options_table.ts";
export { UpgradeOptionsTableHandle };
import { VoidZoneSchedulerTableHandle } from "./void_zone_scheduler_table.ts";
export { VoidZoneSchedulerTableHandle };
import { WinnerTransitionTimerTableHandle } from "./winner_transition_timer_table.ts";
export { WinnerTransitionTimerTableHandle };
import { WorldTableHandle } from "./world_table.ts";
export { WorldTableHandle };

// Import and reexport all types
import { AiState } from "./ai_state_type.ts";
export { AiState };
import { Account } from "./account_type.ts";
export { Account };
import { AccountState } from "./account_state_type.ts";
export { AccountState };
import { ActiveAttack } from "./active_attack_type.ts";
export { ActiveAttack };
import { ActiveAttackCleanup } from "./active_attack_cleanup_type.ts";
export { ActiveAttackCleanup };
import { ActiveMonsterAttack } from "./active_monster_attack_type.ts";
export { ActiveMonsterAttack };
import { AgnaCandleBoltScheduler } from "./agna_candle_bolt_scheduler_type.ts";
export { AgnaCandleBoltScheduler };
import { AgnaCandleScheduler } from "./agna_candle_scheduler_type.ts";
export { AgnaCandleScheduler };
import { AgnaCandleSpawn } from "./agna_candle_spawn_type.ts";
export { AgnaCandleSpawn };
import { AgnaDelayedOrbScheduler } from "./agna_delayed_orb_scheduler_type.ts";
export { AgnaDelayedOrbScheduler };
import { AgnaFireOrbScheduler } from "./agna_fire_orb_scheduler_type.ts";
export { AgnaFireOrbScheduler };
import { AgnaFlamethrowerScheduler } from "./agna_flamethrower_scheduler_type.ts";
export { AgnaFlamethrowerScheduler };
import { AgnaMagicCircle } from "./agna_magic_circle_type.ts";
export { AgnaMagicCircle };
import { AgnaPhase2FlamethrowerScheduler } from "./agna_phase_2_flamethrower_scheduler_type.ts";
export { AgnaPhase2FlamethrowerScheduler };
import { AgnaRitualCompletionCheck } from "./agna_ritual_completion_check_type.ts";
export { AgnaRitualCompletionCheck };
import { AgnaSummoningCircleSpawner } from "./agna_summoning_circle_spawner_type.ts";
export { AgnaSummoningCircleSpawner };
import { AgnaTargetSwitchScheduler } from "./agna_target_switch_scheduler_type.ts";
export { AgnaTargetSwitchScheduler };
import { AttackBurstCooldown } from "./attack_burst_cooldown_type.ts";
export { AttackBurstCooldown };
import { AttackData } from "./attack_data_type.ts";
export { AttackData };
import { AttackType } from "./attack_type_type.ts";
export { AttackType };
import { Bestiary } from "./bestiary_type.ts";
export { Bestiary };
import { BossAgnaLastPattern } from "./boss_agna_last_pattern_type.ts";
export { BossAgnaLastPattern };
import { BossEnderLastPattern } from "./boss_ender_last_pattern_type.ts";
export { BossEnderLastPattern };
import { BossPhase2Timer } from "./boss_phase_2_timer_type.ts";
export { BossPhase2Timer };
import { BossSelection } from "./boss_selection_type.ts";
export { BossSelection };
import { BossSpawnTimer } from "./boss_spawn_timer_type.ts";
export { BossSpawnTimer };
import { BossTargetSwitchScheduler } from "./boss_target_switch_scheduler_type.ts";
export { BossTargetSwitchScheduler };
import { BossType } from "./boss_type_type.ts";
export { BossType };
import { ChaosBallScheduler } from "./chaos_ball_scheduler_type.ts";
export { ChaosBallScheduler };
import { ChosenUpgradeData } from "./chosen_upgrade_data_type.ts";
export { ChosenUpgradeData };
import { ClassData } from "./class_data_type.ts";
export { ClassData };
import { Config } from "./config_type.ts";
export { Config };
import { Curse } from "./curse_type.ts";
export { Curse };
import { CurseType } from "./curse_type_type.ts";
export { CurseType };
import { DbVector2 } from "./db_vector_2_type.ts";
export { DbVector2 };
import { DeadPlayer } from "./dead_player_type.ts";
export { DeadPlayer };
import { DeadPlayerTransitionTimer } from "./dead_player_transition_timer_type.ts";
export { DeadPlayerTransitionTimer };
import { EnderBoltScheduler } from "./ender_bolt_scheduler_type.ts";
export { EnderBoltScheduler };
import { EnderClawSpawner } from "./ender_claw_spawner_type.ts";
export { EnderClawSpawner };
import { EnderScytheScheduler } from "./ender_scythe_scheduler_type.ts";
export { EnderScytheScheduler };
import { EnderScytheSpawnScheduler } from "./ender_scythe_spawn_scheduler_type.ts";
export { EnderScytheSpawnScheduler };
import { Entity } from "./entity_type.ts";
export { Entity };
import { ExpConfig } from "./exp_config_type.ts";
export { ExpConfig };
import { FoundLoreScrolls } from "./found_lore_scrolls_type.ts";
export { FoundLoreScrolls };
import { GameState } from "./game_state_type.ts";
export { GameState };
import { GameTickTimer } from "./game_tick_timer_type.ts";
export { GameTickTimer };
import { Gem } from "./gem_type.ts";
export { Gem };
import { GemLevel } from "./gem_level_type.ts";
export { GemLevel };
import { GuaranteedVoidChestSpawn } from "./guaranteed_void_chest_spawn_type.ts";
export { GuaranteedVoidChestSpawn };
import { HealthRegenScheduler } from "./health_regen_scheduler_type.ts";
export { HealthRegenScheduler };
import { ImpAttackScheduler } from "./imp_attack_scheduler_type.ts";
export { ImpAttackScheduler };
import { LootCapsules } from "./loot_capsules_type.ts";
export { LootCapsules };
import { MonsterAttackType } from "./monster_attack_type_type.ts";
export { MonsterAttackType };
import { MonsterBoid } from "./monster_boid_type.ts";
export { MonsterBoid };
import { MonsterDamage } from "./monster_damage_type.ts";
export { MonsterDamage };
import { MonsterHitCleanup } from "./monster_hit_cleanup_type.ts";
export { MonsterHitCleanup };
import { MonsterSpawnTimer } from "./monster_spawn_timer_type.ts";
export { MonsterSpawnTimer };
import { MonsterSpawners } from "./monster_spawners_type.ts";
export { MonsterSpawners };
import { MonsterStateChange } from "./monster_state_change_type.ts";
export { MonsterStateChange };
import { MonsterType } from "./monster_type_type.ts";
export { MonsterType };
import { MonsterVariant } from "./monster_variant_type.ts";
export { MonsterVariant };
import { Monsters } from "./monsters_type.ts";
export { Monsters };
import { Player } from "./player_type.ts";
export { Player };
import { PlayerClass } from "./player_class_type.ts";
export { PlayerClass };
import { PlayerScheduledAttack } from "./player_scheduled_attack_type.ts";
export { PlayerScheduledAttack };
import { SavedAttack } from "./saved_attack_type.ts";
export { SavedAttack };
import { SavedBuild } from "./saved_build_type.ts";
export { SavedBuild };
import { UpgradeOptionData } from "./upgrade_option_data_type.ts";
export { UpgradeOptionData };
import { UpgradeType } from "./upgrade_type_type.ts";
export { UpgradeType };
import { VoidZoneScheduler } from "./void_zone_scheduler_type.ts";
export { VoidZoneScheduler };
import { WinnerTransitionTimer } from "./winner_transition_timer_type.ts";
export { WinnerTransitionTimer };
import { World } from "./world_type.ts";
export { World };

const REMOTE_MODULE = {
  tables: {
    account: {
      tableName: "account",
      rowType: Account.getTypeScriptAlgebraicType(),
      primaryKey: "identity",
      primaryKeyInfo: {
        colName: "identity",
        colType: Account.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    active_attack_cleanup: {
      tableName: "active_attack_cleanup",
      rowType: ActiveAttackCleanup.getTypeScriptAlgebraicType(),
      primaryKey: "scheduledId",
      primaryKeyInfo: {
        colName: "scheduledId",
        colType: ActiveAttackCleanup.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    active_attacks: {
      tableName: "active_attacks",
      rowType: ActiveAttack.getTypeScriptAlgebraicType(),
      primaryKey: "activeAttackId",
      primaryKeyInfo: {
        colName: "activeAttackId",
        colType: ActiveAttack.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    active_monster_attacks: {
      tableName: "active_monster_attacks",
      rowType: ActiveMonsterAttack.getTypeScriptAlgebraicType(),
      primaryKey: "activeMonsterAttackId",
      primaryKeyInfo: {
        colName: "activeMonsterAttackId",
        colType: ActiveMonsterAttack.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    agna_candle_bolt_scheduler: {
      tableName: "agna_candle_bolt_scheduler",
      rowType: AgnaCandleBoltScheduler.getTypeScriptAlgebraicType(),
      primaryKey: "scheduledId",
      primaryKeyInfo: {
        colName: "scheduledId",
        colType: AgnaCandleBoltScheduler.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    agna_candle_scheduler: {
      tableName: "agna_candle_scheduler",
      rowType: AgnaCandleScheduler.getTypeScriptAlgebraicType(),
      primaryKey: "scheduledId",
      primaryKeyInfo: {
        colName: "scheduledId",
        colType: AgnaCandleScheduler.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    agna_candle_spawns: {
      tableName: "agna_candle_spawns",
      rowType: AgnaCandleSpawn.getTypeScriptAlgebraicType(),
      primaryKey: "spawnId",
      primaryKeyInfo: {
        colName: "spawnId",
        colType: AgnaCandleSpawn.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    agna_delayed_orb_scheduler: {
      tableName: "agna_delayed_orb_scheduler",
      rowType: AgnaDelayedOrbScheduler.getTypeScriptAlgebraicType(),
      primaryKey: "scheduledId",
      primaryKeyInfo: {
        colName: "scheduledId",
        colType: AgnaDelayedOrbScheduler.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    agna_fire_orb_scheduler: {
      tableName: "agna_fire_orb_scheduler",
      rowType: AgnaFireOrbScheduler.getTypeScriptAlgebraicType(),
      primaryKey: "scheduledId",
      primaryKeyInfo: {
        colName: "scheduledId",
        colType: AgnaFireOrbScheduler.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    agna_flamethrower_scheduler: {
      tableName: "agna_flamethrower_scheduler",
      rowType: AgnaFlamethrowerScheduler.getTypeScriptAlgebraicType(),
      primaryKey: "scheduledId",
      primaryKeyInfo: {
        colName: "scheduledId",
        colType: AgnaFlamethrowerScheduler.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    agna_magic_circles: {
      tableName: "agna_magic_circles",
      rowType: AgnaMagicCircle.getTypeScriptAlgebraicType(),
      primaryKey: "circleId",
      primaryKeyInfo: {
        colName: "circleId",
        colType: AgnaMagicCircle.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    agna_phase2_flamethrower_scheduler: {
      tableName: "agna_phase2_flamethrower_scheduler",
      rowType: AgnaPhase2FlamethrowerScheduler.getTypeScriptAlgebraicType(),
      primaryKey: "scheduledId",
      primaryKeyInfo: {
        colName: "scheduledId",
        colType: AgnaPhase2FlamethrowerScheduler.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    agna_ritual_completion_check: {
      tableName: "agna_ritual_completion_check",
      rowType: AgnaRitualCompletionCheck.getTypeScriptAlgebraicType(),
      primaryKey: "scheduledId",
      primaryKeyInfo: {
        colName: "scheduledId",
        colType: AgnaRitualCompletionCheck.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    agna_summoning_circle_spawner: {
      tableName: "agna_summoning_circle_spawner",
      rowType: AgnaSummoningCircleSpawner.getTypeScriptAlgebraicType(),
      primaryKey: "scheduledId",
      primaryKeyInfo: {
        colName: "scheduledId",
        colType: AgnaSummoningCircleSpawner.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    agna_target_switch_scheduler: {
      tableName: "agna_target_switch_scheduler",
      rowType: AgnaTargetSwitchScheduler.getTypeScriptAlgebraicType(),
      primaryKey: "scheduledId",
      primaryKeyInfo: {
        colName: "scheduledId",
        colType: AgnaTargetSwitchScheduler.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    attack_burst_cooldowns: {
      tableName: "attack_burst_cooldowns",
      rowType: AttackBurstCooldown.getTypeScriptAlgebraicType(),
      primaryKey: "scheduledId",
      primaryKeyInfo: {
        colName: "scheduledId",
        colType: AttackBurstCooldown.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    attack_data: {
      tableName: "attack_data",
      rowType: AttackData.getTypeScriptAlgebraicType(),
      primaryKey: "attackId",
      primaryKeyInfo: {
        colName: "attackId",
        colType: AttackData.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    bestiary: {
      tableName: "bestiary",
      rowType: Bestiary.getTypeScriptAlgebraicType(),
      primaryKey: "bestiaryId",
      primaryKeyInfo: {
        colName: "bestiaryId",
        colType: Bestiary.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    boss_agna_last_patterns: {
      tableName: "boss_agna_last_patterns",
      rowType: BossAgnaLastPattern.getTypeScriptAlgebraicType(),
      primaryKey: "monsterId",
      primaryKeyInfo: {
        colName: "monsterId",
        colType: BossAgnaLastPattern.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    boss_ender_last_patterns: {
      tableName: "boss_ender_last_patterns",
      rowType: BossEnderLastPattern.getTypeScriptAlgebraicType(),
      primaryKey: "monsterId",
      primaryKeyInfo: {
        colName: "monsterId",
        colType: BossEnderLastPattern.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    boss_phase_two_timer: {
      tableName: "boss_phase_two_timer",
      rowType: BossPhase2Timer.getTypeScriptAlgebraicType(),
      primaryKey: "scheduledId",
      primaryKeyInfo: {
        colName: "scheduledId",
        colType: BossPhase2Timer.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    boss_selection: {
      tableName: "boss_selection",
      rowType: BossSelection.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: BossSelection.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    boss_spawn_timer: {
      tableName: "boss_spawn_timer",
      rowType: BossSpawnTimer.getTypeScriptAlgebraicType(),
      primaryKey: "scheduledId",
      primaryKeyInfo: {
        colName: "scheduledId",
        colType: BossSpawnTimer.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    boss_target_switch_scheduler: {
      tableName: "boss_target_switch_scheduler",
      rowType: BossTargetSwitchScheduler.getTypeScriptAlgebraicType(),
      primaryKey: "scheduledId",
      primaryKeyInfo: {
        colName: "scheduledId",
        colType: BossTargetSwitchScheduler.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    chaos_ball_scheduler: {
      tableName: "chaos_ball_scheduler",
      rowType: ChaosBallScheduler.getTypeScriptAlgebraicType(),
      primaryKey: "scheduledId",
      primaryKeyInfo: {
        colName: "scheduledId",
        colType: ChaosBallScheduler.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    chosen_upgrades: {
      tableName: "chosen_upgrades",
      rowType: ChosenUpgradeData.getTypeScriptAlgebraicType(),
      primaryKey: "chosenUpgradeId",
      primaryKeyInfo: {
        colName: "chosenUpgradeId",
        colType: ChosenUpgradeData.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    class_data: {
      tableName: "class_data",
      rowType: ClassData.getTypeScriptAlgebraicType(),
      primaryKey: "classId",
      primaryKeyInfo: {
        colName: "classId",
        colType: ClassData.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    config: {
      tableName: "config",
      rowType: Config.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: Config.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    curses: {
      tableName: "curses",
      rowType: Curse.getTypeScriptAlgebraicType(),
      primaryKey: "curseId",
      primaryKeyInfo: {
        colName: "curseId",
        colType: Curse.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    dead_player_transition_timer: {
      tableName: "dead_player_transition_timer",
      rowType: DeadPlayerTransitionTimer.getTypeScriptAlgebraicType(),
      primaryKey: "scheduledId",
      primaryKeyInfo: {
        colName: "scheduledId",
        colType: DeadPlayerTransitionTimer.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    dead_players: {
      tableName: "dead_players",
      rowType: DeadPlayer.getTypeScriptAlgebraicType(),
      primaryKey: "playerId",
      primaryKeyInfo: {
        colName: "playerId",
        colType: DeadPlayer.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    ender_bolt_scheduler: {
      tableName: "ender_bolt_scheduler",
      rowType: EnderBoltScheduler.getTypeScriptAlgebraicType(),
      primaryKey: "scheduledId",
      primaryKeyInfo: {
        colName: "scheduledId",
        colType: EnderBoltScheduler.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    ender_claw_spawner: {
      tableName: "ender_claw_spawner",
      rowType: EnderClawSpawner.getTypeScriptAlgebraicType(),
      primaryKey: "scheduledId",
      primaryKeyInfo: {
        colName: "scheduledId",
        colType: EnderClawSpawner.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    ender_scythe_scheduler: {
      tableName: "ender_scythe_scheduler",
      rowType: EnderScytheScheduler.getTypeScriptAlgebraicType(),
      primaryKey: "scheduledId",
      primaryKeyInfo: {
        colName: "scheduledId",
        colType: EnderScytheScheduler.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    ender_scythe_spawn_scheduler: {
      tableName: "ender_scythe_spawn_scheduler",
      rowType: EnderScytheSpawnScheduler.getTypeScriptAlgebraicType(),
      primaryKey: "scheduledId",
      primaryKeyInfo: {
        colName: "scheduledId",
        colType: EnderScytheSpawnScheduler.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    entity: {
      tableName: "entity",
      rowType: Entity.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: Entity.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    exp_config: {
      tableName: "exp_config",
      rowType: ExpConfig.getTypeScriptAlgebraicType(),
      primaryKey: "configId",
      primaryKeyInfo: {
        colName: "configId",
        colType: ExpConfig.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    found_lore_scrolls: {
      tableName: "found_lore_scrolls",
      rowType: FoundLoreScrolls.getTypeScriptAlgebraicType(),
      primaryKey: "pickupId",
      primaryKeyInfo: {
        colName: "pickupId",
        colType: FoundLoreScrolls.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    game_state: {
      tableName: "game_state",
      rowType: GameState.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: GameState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    game_tick_timer: {
      tableName: "game_tick_timer",
      rowType: GameTickTimer.getTypeScriptAlgebraicType(),
      primaryKey: "scheduledId",
      primaryKeyInfo: {
        colName: "scheduledId",
        colType: GameTickTimer.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    gems: {
      tableName: "gems",
      rowType: Gem.getTypeScriptAlgebraicType(),
      primaryKey: "gemId",
      primaryKeyInfo: {
        colName: "gemId",
        colType: Gem.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    guaranteed_void_chest_spawns: {
      tableName: "guaranteed_void_chest_spawns",
      rowType: GuaranteedVoidChestSpawn.getTypeScriptAlgebraicType(),
      primaryKey: "scheduledId",
      primaryKeyInfo: {
        colName: "scheduledId",
        colType: GuaranteedVoidChestSpawn.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    health_regen_scheduler: {
      tableName: "health_regen_scheduler",
      rowType: HealthRegenScheduler.getTypeScriptAlgebraicType(),
      primaryKey: "scheduledId",
      primaryKeyInfo: {
        colName: "scheduledId",
        colType: HealthRegenScheduler.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    imp_attack_scheduler: {
      tableName: "imp_attack_scheduler",
      rowType: ImpAttackScheduler.getTypeScriptAlgebraicType(),
      primaryKey: "scheduledId",
      primaryKeyInfo: {
        colName: "scheduledId",
        colType: ImpAttackScheduler.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    loot_capsules: {
      tableName: "loot_capsules",
      rowType: LootCapsules.getTypeScriptAlgebraicType(),
      primaryKey: "capsuleId",
      primaryKeyInfo: {
        colName: "capsuleId",
        colType: LootCapsules.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    monster_damage: {
      tableName: "monster_damage",
      rowType: MonsterDamage.getTypeScriptAlgebraicType(),
      primaryKey: "damageId",
      primaryKeyInfo: {
        colName: "damageId",
        colType: MonsterDamage.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    monster_hit_cleanup: {
      tableName: "monster_hit_cleanup",
      rowType: MonsterHitCleanup.getTypeScriptAlgebraicType(),
      primaryKey: "scheduledId",
      primaryKeyInfo: {
        colName: "scheduledId",
        colType: MonsterHitCleanup.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    monster_spawn_timer: {
      tableName: "monster_spawn_timer",
      rowType: MonsterSpawnTimer.getTypeScriptAlgebraicType(),
      primaryKey: "scheduledId",
      primaryKeyInfo: {
        colName: "scheduledId",
        colType: MonsterSpawnTimer.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    monster_spawners: {
      tableName: "monster_spawners",
      rowType: MonsterSpawners.getTypeScriptAlgebraicType(),
      primaryKey: "scheduledId",
      primaryKeyInfo: {
        colName: "scheduledId",
        colType: MonsterSpawners.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    monster_state_changes: {
      tableName: "monster_state_changes",
      rowType: MonsterStateChange.getTypeScriptAlgebraicType(),
      primaryKey: "scheduledId",
      primaryKeyInfo: {
        colName: "scheduledId",
        colType: MonsterStateChange.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    monsters: {
      tableName: "monsters",
      rowType: Monsters.getTypeScriptAlgebraicType(),
      primaryKey: "monsterId",
      primaryKeyInfo: {
        colName: "monsterId",
        colType: Monsters.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    monsters_boid: {
      tableName: "monsters_boid",
      rowType: MonsterBoid.getTypeScriptAlgebraicType(),
      primaryKey: "monsterId",
      primaryKeyInfo: {
        colName: "monsterId",
        colType: MonsterBoid.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    player: {
      tableName: "player",
      rowType: Player.getTypeScriptAlgebraicType(),
      primaryKey: "playerId",
      primaryKeyInfo: {
        colName: "playerId",
        colType: Player.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    player_scheduled_attacks: {
      tableName: "player_scheduled_attacks",
      rowType: PlayerScheduledAttack.getTypeScriptAlgebraicType(),
      primaryKey: "scheduledId",
      primaryKeyInfo: {
        colName: "scheduledId",
        colType: PlayerScheduledAttack.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    saved_attacks: {
      tableName: "saved_attacks",
      rowType: SavedAttack.getTypeScriptAlgebraicType(),
      primaryKey: "savedAttackId",
      primaryKeyInfo: {
        colName: "savedAttackId",
        colType: SavedAttack.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    saved_build: {
      tableName: "saved_build",
      rowType: SavedBuild.getTypeScriptAlgebraicType(),
      primaryKey: "buildId",
      primaryKeyInfo: {
        colName: "buildId",
        colType: SavedBuild.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    upgrade_options: {
      tableName: "upgrade_options",
      rowType: UpgradeOptionData.getTypeScriptAlgebraicType(),
      primaryKey: "upgradeId",
      primaryKeyInfo: {
        colName: "upgradeId",
        colType: UpgradeOptionData.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    void_zone_scheduler: {
      tableName: "void_zone_scheduler",
      rowType: VoidZoneScheduler.getTypeScriptAlgebraicType(),
      primaryKey: "scheduledId",
      primaryKeyInfo: {
        colName: "scheduledId",
        colType: VoidZoneScheduler.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    winner_transition_timer: {
      tableName: "winner_transition_timer",
      rowType: WinnerTransitionTimer.getTypeScriptAlgebraicType(),
      primaryKey: "scheduledId",
      primaryKeyInfo: {
        colName: "scheduledId",
        colType: WinnerTransitionTimer.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    world: {
      tableName: "world",
      rowType: World.getTypeScriptAlgebraicType(),
      primaryKey: "worldId",
      primaryKeyInfo: {
        colName: "worldId",
        colType: World.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
  },
  reducers: {
    admin_add_curse: {
      reducerName: "admin_add_curse",
      argsType: AdminAddCurse.getTypeScriptAlgebraicType(),
    },
    admin_clear_curses: {
      reducerName: "admin_clear_curses",
      argsType: AdminClearCurses.getTypeScriptAlgebraicType(),
    },
    change_monster_state: {
      reducerName: "change_monster_state",
      argsType: ChangeMonsterState.getTypeScriptAlgebraicType(),
    },
    check_agna_ritual_completion: {
      reducerName: "check_agna_ritual_completion",
      argsType: CheckAgnaRitualCompletion.getTypeScriptAlgebraicType(),
    },
    choose_upgrade: {
      reducerName: "choose_upgrade",
      argsType: ChooseUpgrade.getTypeScriptAlgebraicType(),
    },
    cleanup_active_attack: {
      reducerName: "cleanup_active_attack",
      argsType: CleanupActiveAttack.getTypeScriptAlgebraicType(),
    },
    cleanup_monster_hit_record: {
      reducerName: "cleanup_monster_hit_record",
      argsType: CleanupMonsterHitRecord.getTypeScriptAlgebraicType(),
    },
    client_connected: {
      reducerName: "client_connected",
      argsType: ClientConnected.getTypeScriptAlgebraicType(),
    },
    debug_check_gem_drops: {
      reducerName: "debug_check_gem_drops",
      argsType: DebugCheckGemDrops.getTypeScriptAlgebraicType(),
    },
    debug_check_tier: {
      reducerName: "debug_check_tier",
      argsType: DebugCheckTier.getTypeScriptAlgebraicType(),
    },
    debug_enable_bot_pvp: {
      reducerName: "debug_enable_bot_pvp",
      argsType: DebugEnableBotPvp.getTypeScriptAlgebraicType(),
    },
    debug_set_boss_type: {
      reducerName: "debug_set_boss_type",
      argsType: DebugSetBossType.getTypeScriptAlgebraicType(),
    },
    debug_set_super_health: {
      reducerName: "debug_set_super_health",
      argsType: DebugSetSuperHealth.getTypeScriptAlgebraicType(),
    },
    expire_monster_attack: {
      reducerName: "expire_monster_attack",
      argsType: ExpireMonsterAttack.getTypeScriptAlgebraicType(),
    },
    game_tick: {
      reducerName: "game_tick",
      argsType: GameTick.getTypeScriptAlgebraicType(),
    },
    handle_attack_burst_cooldown: {
      reducerName: "handle_attack_burst_cooldown",
      argsType: HandleAttackBurstCooldown.getTypeScriptAlgebraicType(),
    },
    init_attack_data: {
      reducerName: "init_attack_data",
      argsType: InitAttackData.getTypeScriptAlgebraicType(),
    },
    init_health_regen_system: {
      reducerName: "init_health_regen_system",
      argsType: InitHealthRegenSystem.getTypeScriptAlgebraicType(),
    },
    load_build: {
      reducerName: "load_build",
      argsType: LoadBuild.getTypeScriptAlgebraicType(),
    },
    pre_spawn_monster_wave: {
      reducerName: "pre_spawn_monster_wave",
      argsType: PreSpawnMonsterWave.getTypeScriptAlgebraicType(),
    },
    process_health_regen: {
      reducerName: "process_health_regen",
      argsType: ProcessHealthRegen.getTypeScriptAlgebraicType(),
    },
    reroll_upgrades: {
      reducerName: "reroll_upgrades",
      argsType: RerollUpgrades.getTypeScriptAlgebraicType(),
    },
    reset_world: {
      reducerName: "reset_world",
      argsType: ResetWorld.getTypeScriptAlgebraicType(),
    },
    save_build: {
      reducerName: "save_build",
      argsType: SaveBuild.getTypeScriptAlgebraicType(),
    },
    server_trigger_attack: {
      reducerName: "server_trigger_attack",
      argsType: ServerTriggerAttack.getTypeScriptAlgebraicType(),
    },
    set_name: {
      reducerName: "set_name",
      argsType: SetName.getTypeScriptAlgebraicType(),
    },
    set_player_pvp_mode: {
      reducerName: "set_player_pvp_mode",
      argsType: SetPlayerPvpMode.getTypeScriptAlgebraicType(),
    },
    set_player_waypoint: {
      reducerName: "set_player_waypoint",
      argsType: SetPlayerWaypoint.getTypeScriptAlgebraicType(),
    },
    spawn_agna_candle: {
      reducerName: "spawn_agna_candle",
      argsType: SpawnAgnaCandle.getTypeScriptAlgebraicType(),
    },
    spawn_agna_summoning_circle: {
      reducerName: "spawn_agna_summoning_circle",
      argsType: SpawnAgnaSummoningCircle.getTypeScriptAlgebraicType(),
    },
    spawn_boss_for_testing: {
      reducerName: "spawn_boss_for_testing",
      argsType: SpawnBossForTesting.getTypeScriptAlgebraicType(),
    },
    spawn_boss_phase_one: {
      reducerName: "spawn_boss_phase_one",
      argsType: SpawnBossPhaseOne.getTypeScriptAlgebraicType(),
    },
    spawn_boss_phase_two_delayed: {
      reducerName: "spawn_boss_phase_two_delayed",
      argsType: SpawnBossPhaseTwoDelayed.getTypeScriptAlgebraicType(),
    },
    spawn_bot: {
      reducerName: "spawn_bot",
      argsType: SpawnBot.getTypeScriptAlgebraicType(),
    },
    spawn_debug_loot_capsule: {
      reducerName: "spawn_debug_loot_capsule",
      argsType: SpawnDebugLootCapsule.getTypeScriptAlgebraicType(),
    },
    spawn_debug_lore_scroll: {
      reducerName: "spawn_debug_lore_scroll",
      argsType: SpawnDebugLoreScroll.getTypeScriptAlgebraicType(),
    },
    spawn_debug_special_gem: {
      reducerName: "spawn_debug_special_gem",
      argsType: SpawnDebugSpecialGem.getTypeScriptAlgebraicType(),
    },
    spawn_debug_void_chest: {
      reducerName: "spawn_debug_void_chest",
      argsType: SpawnDebugVoidChest.getTypeScriptAlgebraicType(),
    },
    spawn_delayed_agna_fire_orb: {
      reducerName: "spawn_delayed_agna_fire_orb",
      argsType: SpawnDelayedAgnaFireOrb.getTypeScriptAlgebraicType(),
    },
    spawn_ender_claw_wave: {
      reducerName: "spawn_ender_claw_wave",
      argsType: SpawnEnderClawWave.getTypeScriptAlgebraicType(),
    },
    spawn_ender_scythe_spawns: {
      reducerName: "spawn_ender_scythe_spawns",
      argsType: SpawnEnderScytheSpawns.getTypeScriptAlgebraicType(),
    },
    spawn_ender_scythes: {
      reducerName: "spawn_ender_scythes",
      argsType: SpawnEnderScythes.getTypeScriptAlgebraicType(),
    },
    spawn_guaranteed_void_chest: {
      reducerName: "spawn_guaranteed_void_chest",
      argsType: SpawnGuaranteedVoidChest.getTypeScriptAlgebraicType(),
    },
    spawn_loot_capsule: {
      reducerName: "spawn_loot_capsule",
      argsType: SpawnLootCapsule.getTypeScriptAlgebraicType(),
    },
    spawn_monster: {
      reducerName: "spawn_monster",
      argsType: SpawnMonster.getTypeScriptAlgebraicType(),
    },
    spawn_player: {
      reducerName: "spawn_player",
      argsType: SpawnPlayer.getTypeScriptAlgebraicType(),
    },
    transition_dead_to_choosing_class: {
      reducerName: "transition_dead_to_choosing_class",
      argsType: TransitionDeadToChoosingClass.getTypeScriptAlgebraicType(),
    },
    transition_winner_to_choosing_class: {
      reducerName: "transition_winner_to_choosing_class",
      argsType: TransitionWinnerToChoosingClass.getTypeScriptAlgebraicType(),
    },
    trigger_agna_candle_bolt: {
      reducerName: "trigger_agna_candle_bolt",
      argsType: TriggerAgnaCandleBolt.getTypeScriptAlgebraicType(),
    },
    trigger_agna_fire_orb_attack: {
      reducerName: "trigger_agna_fire_orb_attack",
      argsType: TriggerAgnaFireOrbAttack.getTypeScriptAlgebraicType(),
    },
    trigger_agna_flamethrower_attack: {
      reducerName: "trigger_agna_flamethrower_attack",
      argsType: TriggerAgnaFlamethrowerAttack.getTypeScriptAlgebraicType(),
    },
    trigger_agna_phase2_flamethrower_attack: {
      reducerName: "trigger_agna_phase2_flamethrower_attack",
      argsType: TriggerAgnaPhase2FlamethrowerAttack.getTypeScriptAlgebraicType(),
    },
    trigger_agna_target_switch: {
      reducerName: "trigger_agna_target_switch",
      argsType: TriggerAgnaTargetSwitch.getTypeScriptAlgebraicType(),
    },
    trigger_boss_target_switch: {
      reducerName: "trigger_boss_target_switch",
      argsType: TriggerBossTargetSwitch.getTypeScriptAlgebraicType(),
    },
    trigger_chaos_ball_attack: {
      reducerName: "trigger_chaos_ball_attack",
      argsType: TriggerChaosBallAttack.getTypeScriptAlgebraicType(),
    },
    trigger_ender_bolt_attack: {
      reducerName: "trigger_ender_bolt_attack",
      argsType: TriggerEnderBoltAttack.getTypeScriptAlgebraicType(),
    },
    trigger_imp_attack: {
      reducerName: "trigger_imp_attack",
      argsType: TriggerImpAttack.getTypeScriptAlgebraicType(),
    },
    trigger_void_zone_attack: {
      reducerName: "trigger_void_zone_attack",
      argsType: TriggerVoidZoneAttack.getTypeScriptAlgebraicType(),
    },
    update_last_login: {
      reducerName: "update_last_login",
      argsType: UpdateLastLogin.getTypeScriptAlgebraicType(),
    },
  },
  versionInfo: {
    cliVersion: "1.2.0",
  },
  // Constructors which are used by the DbConnectionImpl to
  // extract type information from the generated RemoteModule.
  //
  // NOTE: This is not strictly necessary for `eventContextConstructor` because
  // all we do is build a TypeScript object which we could have done inside the
  // SDK, but if in the future we wanted to create a class this would be
  // necessary because classes have methods, so we'll keep it.
  eventContextConstructor: (imp: DbConnectionImpl, event: Event<Reducer>) => {
    return {
      ...(imp as DbConnection),
      event
    }
  },
  dbViewConstructor: (imp: DbConnectionImpl) => {
    return new RemoteTables(imp);
  },
  reducersConstructor: (imp: DbConnectionImpl, setReducerFlags: SetReducerFlags) => {
    return new RemoteReducers(imp, setReducerFlags);
  },
  setReducerFlagsConstructor: () => {
    return new SetReducerFlags();
  }
}

// A type representing all the possible variants of a reducer.
export type Reducer = never
| { name: "AdminAddCurse", args: AdminAddCurse }
| { name: "AdminClearCurses", args: AdminClearCurses }
| { name: "ChangeMonsterState", args: ChangeMonsterState }
| { name: "CheckAgnaRitualCompletion", args: CheckAgnaRitualCompletion }
| { name: "ChooseUpgrade", args: ChooseUpgrade }
| { name: "CleanupActiveAttack", args: CleanupActiveAttack }
| { name: "CleanupMonsterHitRecord", args: CleanupMonsterHitRecord }
| { name: "ClientConnected", args: ClientConnected }
| { name: "DebugCheckGemDrops", args: DebugCheckGemDrops }
| { name: "DebugCheckTier", args: DebugCheckTier }
| { name: "DebugEnableBotPvp", args: DebugEnableBotPvp }
| { name: "DebugSetBossType", args: DebugSetBossType }
| { name: "DebugSetSuperHealth", args: DebugSetSuperHealth }
| { name: "ExpireMonsterAttack", args: ExpireMonsterAttack }
| { name: "GameTick", args: GameTick }
| { name: "HandleAttackBurstCooldown", args: HandleAttackBurstCooldown }
| { name: "InitAttackData", args: InitAttackData }
| { name: "InitHealthRegenSystem", args: InitHealthRegenSystem }
| { name: "LoadBuild", args: LoadBuild }
| { name: "PreSpawnMonsterWave", args: PreSpawnMonsterWave }
| { name: "ProcessHealthRegen", args: ProcessHealthRegen }
| { name: "RerollUpgrades", args: RerollUpgrades }
| { name: "ResetWorld", args: ResetWorld }
| { name: "SaveBuild", args: SaveBuild }
| { name: "ServerTriggerAttack", args: ServerTriggerAttack }
| { name: "SetName", args: SetName }
| { name: "SetPlayerPvpMode", args: SetPlayerPvpMode }
| { name: "SetPlayerWaypoint", args: SetPlayerWaypoint }
| { name: "SpawnAgnaCandle", args: SpawnAgnaCandle }
| { name: "SpawnAgnaSummoningCircle", args: SpawnAgnaSummoningCircle }
| { name: "SpawnBossForTesting", args: SpawnBossForTesting }
| { name: "SpawnBossPhaseOne", args: SpawnBossPhaseOne }
| { name: "SpawnBossPhaseTwoDelayed", args: SpawnBossPhaseTwoDelayed }
| { name: "SpawnBot", args: SpawnBot }
| { name: "SpawnDebugLootCapsule", args: SpawnDebugLootCapsule }
| { name: "SpawnDebugLoreScroll", args: SpawnDebugLoreScroll }
| { name: "SpawnDebugSpecialGem", args: SpawnDebugSpecialGem }
| { name: "SpawnDebugVoidChest", args: SpawnDebugVoidChest }
| { name: "SpawnDelayedAgnaFireOrb", args: SpawnDelayedAgnaFireOrb }
| { name: "SpawnEnderClawWave", args: SpawnEnderClawWave }
| { name: "SpawnEnderScytheSpawns", args: SpawnEnderScytheSpawns }
| { name: "SpawnEnderScythes", args: SpawnEnderScythes }
| { name: "SpawnGuaranteedVoidChest", args: SpawnGuaranteedVoidChest }
| { name: "SpawnLootCapsule", args: SpawnLootCapsule }
| { name: "SpawnMonster", args: SpawnMonster }
| { name: "SpawnPlayer", args: SpawnPlayer }
| { name: "TransitionDeadToChoosingClass", args: TransitionDeadToChoosingClass }
| { name: "TransitionWinnerToChoosingClass", args: TransitionWinnerToChoosingClass }
| { name: "TriggerAgnaCandleBolt", args: TriggerAgnaCandleBolt }
| { name: "TriggerAgnaFireOrbAttack", args: TriggerAgnaFireOrbAttack }
| { name: "TriggerAgnaFlamethrowerAttack", args: TriggerAgnaFlamethrowerAttack }
| { name: "TriggerAgnaPhase2FlamethrowerAttack", args: TriggerAgnaPhase2FlamethrowerAttack }
| { name: "TriggerAgnaTargetSwitch", args: TriggerAgnaTargetSwitch }
| { name: "TriggerBossTargetSwitch", args: TriggerBossTargetSwitch }
| { name: "TriggerChaosBallAttack", args: TriggerChaosBallAttack }
| { name: "TriggerEnderBoltAttack", args: TriggerEnderBoltAttack }
| { name: "TriggerImpAttack", args: TriggerImpAttack }
| { name: "TriggerVoidZoneAttack", args: TriggerVoidZoneAttack }
| { name: "UpdateLastLogin", args: UpdateLastLogin }
;

export class RemoteReducers {
  constructor(private connection: DbConnectionImpl, private setCallReducerFlags: SetReducerFlags) {}

  adminAddCurse() {
    this.connection.callReducer("admin_add_curse", new Uint8Array(0), this.setCallReducerFlags.adminAddCurseFlags);
  }

  onAdminAddCurse(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("admin_add_curse", callback);
  }

  removeOnAdminAddCurse(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("admin_add_curse", callback);
  }

  adminClearCurses() {
    this.connection.callReducer("admin_clear_curses", new Uint8Array(0), this.setCallReducerFlags.adminClearCursesFlags);
  }

  onAdminClearCurses(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("admin_clear_curses", callback);
  }

  removeOnAdminClearCurses(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("admin_clear_curses", callback);
  }

  changeMonsterState(stateChange: MonsterStateChange) {
    const __args = { stateChange };
    let __writer = new BinaryWriter(1024);
    ChangeMonsterState.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("change_monster_state", __argsBuffer, this.setCallReducerFlags.changeMonsterStateFlags);
  }

  onChangeMonsterState(callback: (ctx: ReducerEventContext, stateChange: MonsterStateChange) => void) {
    this.connection.onReducer("change_monster_state", callback);
  }

  removeOnChangeMonsterState(callback: (ctx: ReducerEventContext, stateChange: MonsterStateChange) => void) {
    this.connection.offReducer("change_monster_state", callback);
  }

  checkAgnaRitualCompletion(checker: AgnaRitualCompletionCheck) {
    const __args = { checker };
    let __writer = new BinaryWriter(1024);
    CheckAgnaRitualCompletion.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("check_agna_ritual_completion", __argsBuffer, this.setCallReducerFlags.checkAgnaRitualCompletionFlags);
  }

  onCheckAgnaRitualCompletion(callback: (ctx: ReducerEventContext, checker: AgnaRitualCompletionCheck) => void) {
    this.connection.onReducer("check_agna_ritual_completion", callback);
  }

  removeOnCheckAgnaRitualCompletion(callback: (ctx: ReducerEventContext, checker: AgnaRitualCompletionCheck) => void) {
    this.connection.offReducer("check_agna_ritual_completion", callback);
  }

  chooseUpgrade(playerId: number, upgradeIndex: number) {
    const __args = { playerId, upgradeIndex };
    let __writer = new BinaryWriter(1024);
    ChooseUpgrade.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("choose_upgrade", __argsBuffer, this.setCallReducerFlags.chooseUpgradeFlags);
  }

  onChooseUpgrade(callback: (ctx: ReducerEventContext, playerId: number, upgradeIndex: number) => void) {
    this.connection.onReducer("choose_upgrade", callback);
  }

  removeOnChooseUpgrade(callback: (ctx: ReducerEventContext, playerId: number, upgradeIndex: number) => void) {
    this.connection.offReducer("choose_upgrade", callback);
  }

  cleanupActiveAttack(cleanup: ActiveAttackCleanup) {
    const __args = { cleanup };
    let __writer = new BinaryWriter(1024);
    CleanupActiveAttack.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("cleanup_active_attack", __argsBuffer, this.setCallReducerFlags.cleanupActiveAttackFlags);
  }

  onCleanupActiveAttack(callback: (ctx: ReducerEventContext, cleanup: ActiveAttackCleanup) => void) {
    this.connection.onReducer("cleanup_active_attack", callback);
  }

  removeOnCleanupActiveAttack(callback: (ctx: ReducerEventContext, cleanup: ActiveAttackCleanup) => void) {
    this.connection.offReducer("cleanup_active_attack", callback);
  }

  cleanupMonsterHitRecord(cleanup: MonsterHitCleanup) {
    const __args = { cleanup };
    let __writer = new BinaryWriter(1024);
    CleanupMonsterHitRecord.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("cleanup_monster_hit_record", __argsBuffer, this.setCallReducerFlags.cleanupMonsterHitRecordFlags);
  }

  onCleanupMonsterHitRecord(callback: (ctx: ReducerEventContext, cleanup: MonsterHitCleanup) => void) {
    this.connection.onReducer("cleanup_monster_hit_record", callback);
  }

  removeOnCleanupMonsterHitRecord(callback: (ctx: ReducerEventContext, cleanup: MonsterHitCleanup) => void) {
    this.connection.offReducer("cleanup_monster_hit_record", callback);
  }

  onClientConnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("client_connected", callback);
  }

  removeOnClientConnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("client_connected", callback);
  }

  debugCheckGemDrops() {
    this.connection.callReducer("debug_check_gem_drops", new Uint8Array(0), this.setCallReducerFlags.debugCheckGemDropsFlags);
  }

  onDebugCheckGemDrops(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("debug_check_gem_drops", callback);
  }

  removeOnDebugCheckGemDrops(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("debug_check_gem_drops", callback);
  }

  debugCheckTier() {
    this.connection.callReducer("debug_check_tier", new Uint8Array(0), this.setCallReducerFlags.debugCheckTierFlags);
  }

  onDebugCheckTier(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("debug_check_tier", callback);
  }

  removeOnDebugCheckTier(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("debug_check_tier", callback);
  }

  debugEnableBotPvp() {
    this.connection.callReducer("debug_enable_bot_pvp", new Uint8Array(0), this.setCallReducerFlags.debugEnableBotPvpFlags);
  }

  onDebugEnableBotPvp(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("debug_enable_bot_pvp", callback);
  }

  removeOnDebugEnableBotPvp(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("debug_enable_bot_pvp", callback);
  }

  debugSetBossType(clientKey: number) {
    const __args = { clientKey };
    let __writer = new BinaryWriter(1024);
    DebugSetBossType.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("debug_set_boss_type", __argsBuffer, this.setCallReducerFlags.debugSetBossTypeFlags);
  }

  onDebugSetBossType(callback: (ctx: ReducerEventContext, clientKey: number) => void) {
    this.connection.onReducer("debug_set_boss_type", callback);
  }

  removeOnDebugSetBossType(callback: (ctx: ReducerEventContext, clientKey: number) => void) {
    this.connection.offReducer("debug_set_boss_type", callback);
  }

  debugSetSuperHealth() {
    this.connection.callReducer("debug_set_super_health", new Uint8Array(0), this.setCallReducerFlags.debugSetSuperHealthFlags);
  }

  onDebugSetSuperHealth(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("debug_set_super_health", callback);
  }

  removeOnDebugSetSuperHealth(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("debug_set_super_health", callback);
  }

  expireMonsterAttack(attack: ActiveMonsterAttack) {
    const __args = { attack };
    let __writer = new BinaryWriter(1024);
    ExpireMonsterAttack.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("expire_monster_attack", __argsBuffer, this.setCallReducerFlags.expireMonsterAttackFlags);
  }

  onExpireMonsterAttack(callback: (ctx: ReducerEventContext, attack: ActiveMonsterAttack) => void) {
    this.connection.onReducer("expire_monster_attack", callback);
  }

  removeOnExpireMonsterAttack(callback: (ctx: ReducerEventContext, attack: ActiveMonsterAttack) => void) {
    this.connection.offReducer("expire_monster_attack", callback);
  }

  gameTick(timer: GameTickTimer) {
    const __args = { timer };
    let __writer = new BinaryWriter(1024);
    GameTick.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("game_tick", __argsBuffer, this.setCallReducerFlags.gameTickFlags);
  }

  onGameTick(callback: (ctx: ReducerEventContext, timer: GameTickTimer) => void) {
    this.connection.onReducer("game_tick", callback);
  }

  removeOnGameTick(callback: (ctx: ReducerEventContext, timer: GameTickTimer) => void) {
    this.connection.offReducer("game_tick", callback);
  }

  handleAttackBurstCooldown(burstCooldown: AttackBurstCooldown) {
    const __args = { burstCooldown };
    let __writer = new BinaryWriter(1024);
    HandleAttackBurstCooldown.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("handle_attack_burst_cooldown", __argsBuffer, this.setCallReducerFlags.handleAttackBurstCooldownFlags);
  }

  onHandleAttackBurstCooldown(callback: (ctx: ReducerEventContext, burstCooldown: AttackBurstCooldown) => void) {
    this.connection.onReducer("handle_attack_burst_cooldown", callback);
  }

  removeOnHandleAttackBurstCooldown(callback: (ctx: ReducerEventContext, burstCooldown: AttackBurstCooldown) => void) {
    this.connection.offReducer("handle_attack_burst_cooldown", callback);
  }

  initAttackData() {
    this.connection.callReducer("init_attack_data", new Uint8Array(0), this.setCallReducerFlags.initAttackDataFlags);
  }

  onInitAttackData(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("init_attack_data", callback);
  }

  removeOnInitAttackData(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("init_attack_data", callback);
  }

  initHealthRegenSystem() {
    this.connection.callReducer("init_health_regen_system", new Uint8Array(0), this.setCallReducerFlags.initHealthRegenSystemFlags);
  }

  onInitHealthRegenSystem(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("init_health_regen_system", callback);
  }

  removeOnInitHealthRegenSystem(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("init_health_regen_system", callback);
  }

  loadBuild() {
    this.connection.callReducer("load_build", new Uint8Array(0), this.setCallReducerFlags.loadBuildFlags);
  }

  onLoadBuild(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("load_build", callback);
  }

  removeOnLoadBuild(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("load_build", callback);
  }

  preSpawnMonsterWave(timer: MonsterSpawnTimer) {
    const __args = { timer };
    let __writer = new BinaryWriter(1024);
    PreSpawnMonsterWave.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("pre_spawn_monster_wave", __argsBuffer, this.setCallReducerFlags.preSpawnMonsterWaveFlags);
  }

  onPreSpawnMonsterWave(callback: (ctx: ReducerEventContext, timer: MonsterSpawnTimer) => void) {
    this.connection.onReducer("pre_spawn_monster_wave", callback);
  }

  removeOnPreSpawnMonsterWave(callback: (ctx: ReducerEventContext, timer: MonsterSpawnTimer) => void) {
    this.connection.offReducer("pre_spawn_monster_wave", callback);
  }

  processHealthRegen(scheduler: HealthRegenScheduler) {
    const __args = { scheduler };
    let __writer = new BinaryWriter(1024);
    ProcessHealthRegen.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("process_health_regen", __argsBuffer, this.setCallReducerFlags.processHealthRegenFlags);
  }

  onProcessHealthRegen(callback: (ctx: ReducerEventContext, scheduler: HealthRegenScheduler) => void) {
    this.connection.onReducer("process_health_regen", callback);
  }

  removeOnProcessHealthRegen(callback: (ctx: ReducerEventContext, scheduler: HealthRegenScheduler) => void) {
    this.connection.offReducer("process_health_regen", callback);
  }

  rerollUpgrades(playerId: number) {
    const __args = { playerId };
    let __writer = new BinaryWriter(1024);
    RerollUpgrades.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("reroll_upgrades", __argsBuffer, this.setCallReducerFlags.rerollUpgradesFlags);
  }

  onRerollUpgrades(callback: (ctx: ReducerEventContext, playerId: number) => void) {
    this.connection.onReducer("reroll_upgrades", callback);
  }

  removeOnRerollUpgrades(callback: (ctx: ReducerEventContext, playerId: number) => void) {
    this.connection.offReducer("reroll_upgrades", callback);
  }

  resetWorld() {
    this.connection.callReducer("reset_world", new Uint8Array(0), this.setCallReducerFlags.resetWorldFlags);
  }

  onResetWorld(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("reset_world", callback);
  }

  removeOnResetWorld(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("reset_world", callback);
  }

  saveBuild() {
    this.connection.callReducer("save_build", new Uint8Array(0), this.setCallReducerFlags.saveBuildFlags);
  }

  onSaveBuild(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("save_build", callback);
  }

  removeOnSaveBuild(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("save_build", callback);
  }

  serverTriggerAttack(attack: PlayerScheduledAttack) {
    const __args = { attack };
    let __writer = new BinaryWriter(1024);
    ServerTriggerAttack.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("server_trigger_attack", __argsBuffer, this.setCallReducerFlags.serverTriggerAttackFlags);
  }

  onServerTriggerAttack(callback: (ctx: ReducerEventContext, attack: PlayerScheduledAttack) => void) {
    this.connection.onReducer("server_trigger_attack", callback);
  }

  removeOnServerTriggerAttack(callback: (ctx: ReducerEventContext, attack: PlayerScheduledAttack) => void) {
    this.connection.offReducer("server_trigger_attack", callback);
  }

  setName(name: string) {
    const __args = { name };
    let __writer = new BinaryWriter(1024);
    SetName.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("set_name", __argsBuffer, this.setCallReducerFlags.setNameFlags);
  }

  onSetName(callback: (ctx: ReducerEventContext, name: string) => void) {
    this.connection.onReducer("set_name", callback);
  }

  removeOnSetName(callback: (ctx: ReducerEventContext, name: string) => void) {
    this.connection.offReducer("set_name", callback);
  }

  setPlayerPvpMode(pvpEnabled: boolean) {
    const __args = { pvpEnabled };
    let __writer = new BinaryWriter(1024);
    SetPlayerPvpMode.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("set_player_pvp_mode", __argsBuffer, this.setCallReducerFlags.setPlayerPvpModeFlags);
  }

  onSetPlayerPvpMode(callback: (ctx: ReducerEventContext, pvpEnabled: boolean) => void) {
    this.connection.onReducer("set_player_pvp_mode", callback);
  }

  removeOnSetPlayerPvpMode(callback: (ctx: ReducerEventContext, pvpEnabled: boolean) => void) {
    this.connection.offReducer("set_player_pvp_mode", callback);
  }

  setPlayerWaypoint(waypointX: number, waypointY: number) {
    const __args = { waypointX, waypointY };
    let __writer = new BinaryWriter(1024);
    SetPlayerWaypoint.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("set_player_waypoint", __argsBuffer, this.setCallReducerFlags.setPlayerWaypointFlags);
  }

  onSetPlayerWaypoint(callback: (ctx: ReducerEventContext, waypointX: number, waypointY: number) => void) {
    this.connection.onReducer("set_player_waypoint", callback);
  }

  removeOnSetPlayerWaypoint(callback: (ctx: ReducerEventContext, waypointX: number, waypointY: number) => void) {
    this.connection.offReducer("set_player_waypoint", callback);
  }

  spawnAgnaCandle(scheduler: AgnaCandleScheduler) {
    const __args = { scheduler };
    let __writer = new BinaryWriter(1024);
    SpawnAgnaCandle.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("spawn_agna_candle", __argsBuffer, this.setCallReducerFlags.spawnAgnaCandleFlags);
  }

  onSpawnAgnaCandle(callback: (ctx: ReducerEventContext, scheduler: AgnaCandleScheduler) => void) {
    this.connection.onReducer("spawn_agna_candle", callback);
  }

  removeOnSpawnAgnaCandle(callback: (ctx: ReducerEventContext, scheduler: AgnaCandleScheduler) => void) {
    this.connection.offReducer("spawn_agna_candle", callback);
  }

  spawnAgnaSummoningCircle(spawner: AgnaSummoningCircleSpawner) {
    const __args = { spawner };
    let __writer = new BinaryWriter(1024);
    SpawnAgnaSummoningCircle.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("spawn_agna_summoning_circle", __argsBuffer, this.setCallReducerFlags.spawnAgnaSummoningCircleFlags);
  }

  onSpawnAgnaSummoningCircle(callback: (ctx: ReducerEventContext, spawner: AgnaSummoningCircleSpawner) => void) {
    this.connection.onReducer("spawn_agna_summoning_circle", callback);
  }

  removeOnSpawnAgnaSummoningCircle(callback: (ctx: ReducerEventContext, spawner: AgnaSummoningCircleSpawner) => void) {
    this.connection.offReducer("spawn_agna_summoning_circle", callback);
  }

  spawnBossForTesting() {
    this.connection.callReducer("spawn_boss_for_testing", new Uint8Array(0), this.setCallReducerFlags.spawnBossForTestingFlags);
  }

  onSpawnBossForTesting(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("spawn_boss_for_testing", callback);
  }

  removeOnSpawnBossForTesting(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("spawn_boss_for_testing", callback);
  }

  spawnBossPhaseOne(timer: BossSpawnTimer) {
    const __args = { timer };
    let __writer = new BinaryWriter(1024);
    SpawnBossPhaseOne.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("spawn_boss_phase_one", __argsBuffer, this.setCallReducerFlags.spawnBossPhaseOneFlags);
  }

  onSpawnBossPhaseOne(callback: (ctx: ReducerEventContext, timer: BossSpawnTimer) => void) {
    this.connection.onReducer("spawn_boss_phase_one", callback);
  }

  removeOnSpawnBossPhaseOne(callback: (ctx: ReducerEventContext, timer: BossSpawnTimer) => void) {
    this.connection.offReducer("spawn_boss_phase_one", callback);
  }

  spawnBossPhaseTwoDelayed(timer: BossPhase2Timer) {
    const __args = { timer };
    let __writer = new BinaryWriter(1024);
    SpawnBossPhaseTwoDelayed.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("spawn_boss_phase_two_delayed", __argsBuffer, this.setCallReducerFlags.spawnBossPhaseTwoDelayedFlags);
  }

  onSpawnBossPhaseTwoDelayed(callback: (ctx: ReducerEventContext, timer: BossPhase2Timer) => void) {
    this.connection.onReducer("spawn_boss_phase_two_delayed", callback);
  }

  removeOnSpawnBossPhaseTwoDelayed(callback: (ctx: ReducerEventContext, timer: BossPhase2Timer) => void) {
    this.connection.offReducer("spawn_boss_phase_two_delayed", callback);
  }

  spawnBot() {
    this.connection.callReducer("spawn_bot", new Uint8Array(0), this.setCallReducerFlags.spawnBotFlags);
  }

  onSpawnBot(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("spawn_bot", callback);
  }

  removeOnSpawnBot(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("spawn_bot", callback);
  }

  spawnDebugLootCapsule() {
    this.connection.callReducer("spawn_debug_loot_capsule", new Uint8Array(0), this.setCallReducerFlags.spawnDebugLootCapsuleFlags);
  }

  onSpawnDebugLootCapsule(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("spawn_debug_loot_capsule", callback);
  }

  removeOnSpawnDebugLootCapsule(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("spawn_debug_loot_capsule", callback);
  }

  spawnDebugLoreScroll() {
    this.connection.callReducer("spawn_debug_lore_scroll", new Uint8Array(0), this.setCallReducerFlags.spawnDebugLoreScrollFlags);
  }

  onSpawnDebugLoreScroll(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("spawn_debug_lore_scroll", callback);
  }

  removeOnSpawnDebugLoreScroll(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("spawn_debug_lore_scroll", callback);
  }

  spawnDebugSpecialGem() {
    this.connection.callReducer("spawn_debug_special_gem", new Uint8Array(0), this.setCallReducerFlags.spawnDebugSpecialGemFlags);
  }

  onSpawnDebugSpecialGem(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("spawn_debug_special_gem", callback);
  }

  removeOnSpawnDebugSpecialGem(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("spawn_debug_special_gem", callback);
  }

  spawnDebugVoidChest() {
    this.connection.callReducer("spawn_debug_void_chest", new Uint8Array(0), this.setCallReducerFlags.spawnDebugVoidChestFlags);
  }

  onSpawnDebugVoidChest(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("spawn_debug_void_chest", callback);
  }

  removeOnSpawnDebugVoidChest(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("spawn_debug_void_chest", callback);
  }

  spawnDelayedAgnaFireOrb(scheduler: AgnaDelayedOrbScheduler) {
    const __args = { scheduler };
    let __writer = new BinaryWriter(1024);
    SpawnDelayedAgnaFireOrb.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("spawn_delayed_agna_fire_orb", __argsBuffer, this.setCallReducerFlags.spawnDelayedAgnaFireOrbFlags);
  }

  onSpawnDelayedAgnaFireOrb(callback: (ctx: ReducerEventContext, scheduler: AgnaDelayedOrbScheduler) => void) {
    this.connection.onReducer("spawn_delayed_agna_fire_orb", callback);
  }

  removeOnSpawnDelayedAgnaFireOrb(callback: (ctx: ReducerEventContext, scheduler: AgnaDelayedOrbScheduler) => void) {
    this.connection.offReducer("spawn_delayed_agna_fire_orb", callback);
  }

  spawnEnderClawWave(spawner: EnderClawSpawner) {
    const __args = { spawner };
    let __writer = new BinaryWriter(1024);
    SpawnEnderClawWave.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("spawn_ender_claw_wave", __argsBuffer, this.setCallReducerFlags.spawnEnderClawWaveFlags);
  }

  onSpawnEnderClawWave(callback: (ctx: ReducerEventContext, spawner: EnderClawSpawner) => void) {
    this.connection.onReducer("spawn_ender_claw_wave", callback);
  }

  removeOnSpawnEnderClawWave(callback: (ctx: ReducerEventContext, spawner: EnderClawSpawner) => void) {
    this.connection.offReducer("spawn_ender_claw_wave", callback);
  }

  spawnEnderScytheSpawns(scheduler: EnderScytheSpawnScheduler) {
    const __args = { scheduler };
    let __writer = new BinaryWriter(1024);
    SpawnEnderScytheSpawns.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("spawn_ender_scythe_spawns", __argsBuffer, this.setCallReducerFlags.spawnEnderScytheSpawnsFlags);
  }

  onSpawnEnderScytheSpawns(callback: (ctx: ReducerEventContext, scheduler: EnderScytheSpawnScheduler) => void) {
    this.connection.onReducer("spawn_ender_scythe_spawns", callback);
  }

  removeOnSpawnEnderScytheSpawns(callback: (ctx: ReducerEventContext, scheduler: EnderScytheSpawnScheduler) => void) {
    this.connection.offReducer("spawn_ender_scythe_spawns", callback);
  }

  spawnEnderScythes(scheduler: EnderScytheScheduler) {
    const __args = { scheduler };
    let __writer = new BinaryWriter(1024);
    SpawnEnderScythes.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("spawn_ender_scythes", __argsBuffer, this.setCallReducerFlags.spawnEnderScythesFlags);
  }

  onSpawnEnderScythes(callback: (ctx: ReducerEventContext, scheduler: EnderScytheScheduler) => void) {
    this.connection.onReducer("spawn_ender_scythes", callback);
  }

  removeOnSpawnEnderScythes(callback: (ctx: ReducerEventContext, scheduler: EnderScytheScheduler) => void) {
    this.connection.offReducer("spawn_ender_scythes", callback);
  }

  spawnGuaranteedVoidChest(spawn: GuaranteedVoidChestSpawn) {
    const __args = { spawn };
    let __writer = new BinaryWriter(1024);
    SpawnGuaranteedVoidChest.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("spawn_guaranteed_void_chest", __argsBuffer, this.setCallReducerFlags.spawnGuaranteedVoidChestFlags);
  }

  onSpawnGuaranteedVoidChest(callback: (ctx: ReducerEventContext, spawn: GuaranteedVoidChestSpawn) => void) {
    this.connection.onReducer("spawn_guaranteed_void_chest", callback);
  }

  removeOnSpawnGuaranteedVoidChest(callback: (ctx: ReducerEventContext, spawn: GuaranteedVoidChestSpawn) => void) {
    this.connection.offReducer("spawn_guaranteed_void_chest", callback);
  }

  spawnLootCapsule(capsule: LootCapsules) {
    const __args = { capsule };
    let __writer = new BinaryWriter(1024);
    SpawnLootCapsule.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("spawn_loot_capsule", __argsBuffer, this.setCallReducerFlags.spawnLootCapsuleFlags);
  }

  onSpawnLootCapsule(callback: (ctx: ReducerEventContext, capsule: LootCapsules) => void) {
    this.connection.onReducer("spawn_loot_capsule", callback);
  }

  removeOnSpawnLootCapsule(callback: (ctx: ReducerEventContext, capsule: LootCapsules) => void) {
    this.connection.offReducer("spawn_loot_capsule", callback);
  }

  spawnMonster(spawner: MonsterSpawners) {
    const __args = { spawner };
    let __writer = new BinaryWriter(1024);
    SpawnMonster.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("spawn_monster", __argsBuffer, this.setCallReducerFlags.spawnMonsterFlags);
  }

  onSpawnMonster(callback: (ctx: ReducerEventContext, spawner: MonsterSpawners) => void) {
    this.connection.onReducer("spawn_monster", callback);
  }

  removeOnSpawnMonster(callback: (ctx: ReducerEventContext, spawner: MonsterSpawners) => void) {
    this.connection.offReducer("spawn_monster", callback);
  }

  spawnPlayer(classId: number) {
    const __args = { classId };
    let __writer = new BinaryWriter(1024);
    SpawnPlayer.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("spawn_player", __argsBuffer, this.setCallReducerFlags.spawnPlayerFlags);
  }

  onSpawnPlayer(callback: (ctx: ReducerEventContext, classId: number) => void) {
    this.connection.onReducer("spawn_player", callback);
  }

  removeOnSpawnPlayer(callback: (ctx: ReducerEventContext, classId: number) => void) {
    this.connection.offReducer("spawn_player", callback);
  }

  transitionDeadToChoosingClass(timer: DeadPlayerTransitionTimer) {
    const __args = { timer };
    let __writer = new BinaryWriter(1024);
    TransitionDeadToChoosingClass.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("transition_dead_to_choosing_class", __argsBuffer, this.setCallReducerFlags.transitionDeadToChoosingClassFlags);
  }

  onTransitionDeadToChoosingClass(callback: (ctx: ReducerEventContext, timer: DeadPlayerTransitionTimer) => void) {
    this.connection.onReducer("transition_dead_to_choosing_class", callback);
  }

  removeOnTransitionDeadToChoosingClass(callback: (ctx: ReducerEventContext, timer: DeadPlayerTransitionTimer) => void) {
    this.connection.offReducer("transition_dead_to_choosing_class", callback);
  }

  transitionWinnerToChoosingClass(timer: WinnerTransitionTimer) {
    const __args = { timer };
    let __writer = new BinaryWriter(1024);
    TransitionWinnerToChoosingClass.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("transition_winner_to_choosing_class", __argsBuffer, this.setCallReducerFlags.transitionWinnerToChoosingClassFlags);
  }

  onTransitionWinnerToChoosingClass(callback: (ctx: ReducerEventContext, timer: WinnerTransitionTimer) => void) {
    this.connection.onReducer("transition_winner_to_choosing_class", callback);
  }

  removeOnTransitionWinnerToChoosingClass(callback: (ctx: ReducerEventContext, timer: WinnerTransitionTimer) => void) {
    this.connection.offReducer("transition_winner_to_choosing_class", callback);
  }

  triggerAgnaCandleBolt(scheduler: AgnaCandleBoltScheduler) {
    const __args = { scheduler };
    let __writer = new BinaryWriter(1024);
    TriggerAgnaCandleBolt.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("trigger_agna_candle_bolt", __argsBuffer, this.setCallReducerFlags.triggerAgnaCandleBoltFlags);
  }

  onTriggerAgnaCandleBolt(callback: (ctx: ReducerEventContext, scheduler: AgnaCandleBoltScheduler) => void) {
    this.connection.onReducer("trigger_agna_candle_bolt", callback);
  }

  removeOnTriggerAgnaCandleBolt(callback: (ctx: ReducerEventContext, scheduler: AgnaCandleBoltScheduler) => void) {
    this.connection.offReducer("trigger_agna_candle_bolt", callback);
  }

  triggerAgnaFireOrbAttack(scheduler: AgnaFireOrbScheduler) {
    const __args = { scheduler };
    let __writer = new BinaryWriter(1024);
    TriggerAgnaFireOrbAttack.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("trigger_agna_fire_orb_attack", __argsBuffer, this.setCallReducerFlags.triggerAgnaFireOrbAttackFlags);
  }

  onTriggerAgnaFireOrbAttack(callback: (ctx: ReducerEventContext, scheduler: AgnaFireOrbScheduler) => void) {
    this.connection.onReducer("trigger_agna_fire_orb_attack", callback);
  }

  removeOnTriggerAgnaFireOrbAttack(callback: (ctx: ReducerEventContext, scheduler: AgnaFireOrbScheduler) => void) {
    this.connection.offReducer("trigger_agna_fire_orb_attack", callback);
  }

  triggerAgnaFlamethrowerAttack(scheduler: AgnaFlamethrowerScheduler) {
    const __args = { scheduler };
    let __writer = new BinaryWriter(1024);
    TriggerAgnaFlamethrowerAttack.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("trigger_agna_flamethrower_attack", __argsBuffer, this.setCallReducerFlags.triggerAgnaFlamethrowerAttackFlags);
  }

  onTriggerAgnaFlamethrowerAttack(callback: (ctx: ReducerEventContext, scheduler: AgnaFlamethrowerScheduler) => void) {
    this.connection.onReducer("trigger_agna_flamethrower_attack", callback);
  }

  removeOnTriggerAgnaFlamethrowerAttack(callback: (ctx: ReducerEventContext, scheduler: AgnaFlamethrowerScheduler) => void) {
    this.connection.offReducer("trigger_agna_flamethrower_attack", callback);
  }

  triggerAgnaPhase2FlamethrowerAttack(scheduler: AgnaPhase2FlamethrowerScheduler) {
    const __args = { scheduler };
    let __writer = new BinaryWriter(1024);
    TriggerAgnaPhase2FlamethrowerAttack.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("trigger_agna_phase2_flamethrower_attack", __argsBuffer, this.setCallReducerFlags.triggerAgnaPhase2FlamethrowerAttackFlags);
  }

  onTriggerAgnaPhase2FlamethrowerAttack(callback: (ctx: ReducerEventContext, scheduler: AgnaPhase2FlamethrowerScheduler) => void) {
    this.connection.onReducer("trigger_agna_phase2_flamethrower_attack", callback);
  }

  removeOnTriggerAgnaPhase2FlamethrowerAttack(callback: (ctx: ReducerEventContext, scheduler: AgnaPhase2FlamethrowerScheduler) => void) {
    this.connection.offReducer("trigger_agna_phase2_flamethrower_attack", callback);
  }

  triggerAgnaTargetSwitch(scheduler: AgnaTargetSwitchScheduler) {
    const __args = { scheduler };
    let __writer = new BinaryWriter(1024);
    TriggerAgnaTargetSwitch.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("trigger_agna_target_switch", __argsBuffer, this.setCallReducerFlags.triggerAgnaTargetSwitchFlags);
  }

  onTriggerAgnaTargetSwitch(callback: (ctx: ReducerEventContext, scheduler: AgnaTargetSwitchScheduler) => void) {
    this.connection.onReducer("trigger_agna_target_switch", callback);
  }

  removeOnTriggerAgnaTargetSwitch(callback: (ctx: ReducerEventContext, scheduler: AgnaTargetSwitchScheduler) => void) {
    this.connection.offReducer("trigger_agna_target_switch", callback);
  }

  triggerBossTargetSwitch(scheduler: BossTargetSwitchScheduler) {
    const __args = { scheduler };
    let __writer = new BinaryWriter(1024);
    TriggerBossTargetSwitch.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("trigger_boss_target_switch", __argsBuffer, this.setCallReducerFlags.triggerBossTargetSwitchFlags);
  }

  onTriggerBossTargetSwitch(callback: (ctx: ReducerEventContext, scheduler: BossTargetSwitchScheduler) => void) {
    this.connection.onReducer("trigger_boss_target_switch", callback);
  }

  removeOnTriggerBossTargetSwitch(callback: (ctx: ReducerEventContext, scheduler: BossTargetSwitchScheduler) => void) {
    this.connection.offReducer("trigger_boss_target_switch", callback);
  }

  triggerChaosBallAttack(scheduler: ChaosBallScheduler) {
    const __args = { scheduler };
    let __writer = new BinaryWriter(1024);
    TriggerChaosBallAttack.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("trigger_chaos_ball_attack", __argsBuffer, this.setCallReducerFlags.triggerChaosBallAttackFlags);
  }

  onTriggerChaosBallAttack(callback: (ctx: ReducerEventContext, scheduler: ChaosBallScheduler) => void) {
    this.connection.onReducer("trigger_chaos_ball_attack", callback);
  }

  removeOnTriggerChaosBallAttack(callback: (ctx: ReducerEventContext, scheduler: ChaosBallScheduler) => void) {
    this.connection.offReducer("trigger_chaos_ball_attack", callback);
  }

  triggerEnderBoltAttack(scheduler: EnderBoltScheduler) {
    const __args = { scheduler };
    let __writer = new BinaryWriter(1024);
    TriggerEnderBoltAttack.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("trigger_ender_bolt_attack", __argsBuffer, this.setCallReducerFlags.triggerEnderBoltAttackFlags);
  }

  onTriggerEnderBoltAttack(callback: (ctx: ReducerEventContext, scheduler: EnderBoltScheduler) => void) {
    this.connection.onReducer("trigger_ender_bolt_attack", callback);
  }

  removeOnTriggerEnderBoltAttack(callback: (ctx: ReducerEventContext, scheduler: EnderBoltScheduler) => void) {
    this.connection.offReducer("trigger_ender_bolt_attack", callback);
  }

  triggerImpAttack(scheduler: ImpAttackScheduler) {
    const __args = { scheduler };
    let __writer = new BinaryWriter(1024);
    TriggerImpAttack.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("trigger_imp_attack", __argsBuffer, this.setCallReducerFlags.triggerImpAttackFlags);
  }

  onTriggerImpAttack(callback: (ctx: ReducerEventContext, scheduler: ImpAttackScheduler) => void) {
    this.connection.onReducer("trigger_imp_attack", callback);
  }

  removeOnTriggerImpAttack(callback: (ctx: ReducerEventContext, scheduler: ImpAttackScheduler) => void) {
    this.connection.offReducer("trigger_imp_attack", callback);
  }

  triggerVoidZoneAttack(scheduler: VoidZoneScheduler) {
    const __args = { scheduler };
    let __writer = new BinaryWriter(1024);
    TriggerVoidZoneAttack.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("trigger_void_zone_attack", __argsBuffer, this.setCallReducerFlags.triggerVoidZoneAttackFlags);
  }

  onTriggerVoidZoneAttack(callback: (ctx: ReducerEventContext, scheduler: VoidZoneScheduler) => void) {
    this.connection.onReducer("trigger_void_zone_attack", callback);
  }

  removeOnTriggerVoidZoneAttack(callback: (ctx: ReducerEventContext, scheduler: VoidZoneScheduler) => void) {
    this.connection.offReducer("trigger_void_zone_attack", callback);
  }

  updateLastLogin() {
    this.connection.callReducer("update_last_login", new Uint8Array(0), this.setCallReducerFlags.updateLastLoginFlags);
  }

  onUpdateLastLogin(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("update_last_login", callback);
  }

  removeOnUpdateLastLogin(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("update_last_login", callback);
  }

}

export class SetReducerFlags {
  adminAddCurseFlags: CallReducerFlags = 'FullUpdate';
  adminAddCurse(flags: CallReducerFlags) {
    this.adminAddCurseFlags = flags;
  }

  adminClearCursesFlags: CallReducerFlags = 'FullUpdate';
  adminClearCurses(flags: CallReducerFlags) {
    this.adminClearCursesFlags = flags;
  }

  changeMonsterStateFlags: CallReducerFlags = 'FullUpdate';
  changeMonsterState(flags: CallReducerFlags) {
    this.changeMonsterStateFlags = flags;
  }

  checkAgnaRitualCompletionFlags: CallReducerFlags = 'FullUpdate';
  checkAgnaRitualCompletion(flags: CallReducerFlags) {
    this.checkAgnaRitualCompletionFlags = flags;
  }

  chooseUpgradeFlags: CallReducerFlags = 'FullUpdate';
  chooseUpgrade(flags: CallReducerFlags) {
    this.chooseUpgradeFlags = flags;
  }

  cleanupActiveAttackFlags: CallReducerFlags = 'FullUpdate';
  cleanupActiveAttack(flags: CallReducerFlags) {
    this.cleanupActiveAttackFlags = flags;
  }

  cleanupMonsterHitRecordFlags: CallReducerFlags = 'FullUpdate';
  cleanupMonsterHitRecord(flags: CallReducerFlags) {
    this.cleanupMonsterHitRecordFlags = flags;
  }

  debugCheckGemDropsFlags: CallReducerFlags = 'FullUpdate';
  debugCheckGemDrops(flags: CallReducerFlags) {
    this.debugCheckGemDropsFlags = flags;
  }

  debugCheckTierFlags: CallReducerFlags = 'FullUpdate';
  debugCheckTier(flags: CallReducerFlags) {
    this.debugCheckTierFlags = flags;
  }

  debugEnableBotPvpFlags: CallReducerFlags = 'FullUpdate';
  debugEnableBotPvp(flags: CallReducerFlags) {
    this.debugEnableBotPvpFlags = flags;
  }

  debugSetBossTypeFlags: CallReducerFlags = 'FullUpdate';
  debugSetBossType(flags: CallReducerFlags) {
    this.debugSetBossTypeFlags = flags;
  }

  debugSetSuperHealthFlags: CallReducerFlags = 'FullUpdate';
  debugSetSuperHealth(flags: CallReducerFlags) {
    this.debugSetSuperHealthFlags = flags;
  }

  expireMonsterAttackFlags: CallReducerFlags = 'FullUpdate';
  expireMonsterAttack(flags: CallReducerFlags) {
    this.expireMonsterAttackFlags = flags;
  }

  gameTickFlags: CallReducerFlags = 'FullUpdate';
  gameTick(flags: CallReducerFlags) {
    this.gameTickFlags = flags;
  }

  handleAttackBurstCooldownFlags: CallReducerFlags = 'FullUpdate';
  handleAttackBurstCooldown(flags: CallReducerFlags) {
    this.handleAttackBurstCooldownFlags = flags;
  }

  initAttackDataFlags: CallReducerFlags = 'FullUpdate';
  initAttackData(flags: CallReducerFlags) {
    this.initAttackDataFlags = flags;
  }

  initHealthRegenSystemFlags: CallReducerFlags = 'FullUpdate';
  initHealthRegenSystem(flags: CallReducerFlags) {
    this.initHealthRegenSystemFlags = flags;
  }

  loadBuildFlags: CallReducerFlags = 'FullUpdate';
  loadBuild(flags: CallReducerFlags) {
    this.loadBuildFlags = flags;
  }

  preSpawnMonsterWaveFlags: CallReducerFlags = 'FullUpdate';
  preSpawnMonsterWave(flags: CallReducerFlags) {
    this.preSpawnMonsterWaveFlags = flags;
  }

  processHealthRegenFlags: CallReducerFlags = 'FullUpdate';
  processHealthRegen(flags: CallReducerFlags) {
    this.processHealthRegenFlags = flags;
  }

  rerollUpgradesFlags: CallReducerFlags = 'FullUpdate';
  rerollUpgrades(flags: CallReducerFlags) {
    this.rerollUpgradesFlags = flags;
  }

  resetWorldFlags: CallReducerFlags = 'FullUpdate';
  resetWorld(flags: CallReducerFlags) {
    this.resetWorldFlags = flags;
  }

  saveBuildFlags: CallReducerFlags = 'FullUpdate';
  saveBuild(flags: CallReducerFlags) {
    this.saveBuildFlags = flags;
  }

  serverTriggerAttackFlags: CallReducerFlags = 'FullUpdate';
  serverTriggerAttack(flags: CallReducerFlags) {
    this.serverTriggerAttackFlags = flags;
  }

  setNameFlags: CallReducerFlags = 'FullUpdate';
  setName(flags: CallReducerFlags) {
    this.setNameFlags = flags;
  }

  setPlayerPvpModeFlags: CallReducerFlags = 'FullUpdate';
  setPlayerPvpMode(flags: CallReducerFlags) {
    this.setPlayerPvpModeFlags = flags;
  }

  setPlayerWaypointFlags: CallReducerFlags = 'FullUpdate';
  setPlayerWaypoint(flags: CallReducerFlags) {
    this.setPlayerWaypointFlags = flags;
  }

  spawnAgnaCandleFlags: CallReducerFlags = 'FullUpdate';
  spawnAgnaCandle(flags: CallReducerFlags) {
    this.spawnAgnaCandleFlags = flags;
  }

  spawnAgnaSummoningCircleFlags: CallReducerFlags = 'FullUpdate';
  spawnAgnaSummoningCircle(flags: CallReducerFlags) {
    this.spawnAgnaSummoningCircleFlags = flags;
  }

  spawnBossForTestingFlags: CallReducerFlags = 'FullUpdate';
  spawnBossForTesting(flags: CallReducerFlags) {
    this.spawnBossForTestingFlags = flags;
  }

  spawnBossPhaseOneFlags: CallReducerFlags = 'FullUpdate';
  spawnBossPhaseOne(flags: CallReducerFlags) {
    this.spawnBossPhaseOneFlags = flags;
  }

  spawnBossPhaseTwoDelayedFlags: CallReducerFlags = 'FullUpdate';
  spawnBossPhaseTwoDelayed(flags: CallReducerFlags) {
    this.spawnBossPhaseTwoDelayedFlags = flags;
  }

  spawnBotFlags: CallReducerFlags = 'FullUpdate';
  spawnBot(flags: CallReducerFlags) {
    this.spawnBotFlags = flags;
  }

  spawnDebugLootCapsuleFlags: CallReducerFlags = 'FullUpdate';
  spawnDebugLootCapsule(flags: CallReducerFlags) {
    this.spawnDebugLootCapsuleFlags = flags;
  }

  spawnDebugLoreScrollFlags: CallReducerFlags = 'FullUpdate';
  spawnDebugLoreScroll(flags: CallReducerFlags) {
    this.spawnDebugLoreScrollFlags = flags;
  }

  spawnDebugSpecialGemFlags: CallReducerFlags = 'FullUpdate';
  spawnDebugSpecialGem(flags: CallReducerFlags) {
    this.spawnDebugSpecialGemFlags = flags;
  }

  spawnDebugVoidChestFlags: CallReducerFlags = 'FullUpdate';
  spawnDebugVoidChest(flags: CallReducerFlags) {
    this.spawnDebugVoidChestFlags = flags;
  }

  spawnDelayedAgnaFireOrbFlags: CallReducerFlags = 'FullUpdate';
  spawnDelayedAgnaFireOrb(flags: CallReducerFlags) {
    this.spawnDelayedAgnaFireOrbFlags = flags;
  }

  spawnEnderClawWaveFlags: CallReducerFlags = 'FullUpdate';
  spawnEnderClawWave(flags: CallReducerFlags) {
    this.spawnEnderClawWaveFlags = flags;
  }

  spawnEnderScytheSpawnsFlags: CallReducerFlags = 'FullUpdate';
  spawnEnderScytheSpawns(flags: CallReducerFlags) {
    this.spawnEnderScytheSpawnsFlags = flags;
  }

  spawnEnderScythesFlags: CallReducerFlags = 'FullUpdate';
  spawnEnderScythes(flags: CallReducerFlags) {
    this.spawnEnderScythesFlags = flags;
  }

  spawnGuaranteedVoidChestFlags: CallReducerFlags = 'FullUpdate';
  spawnGuaranteedVoidChest(flags: CallReducerFlags) {
    this.spawnGuaranteedVoidChestFlags = flags;
  }

  spawnLootCapsuleFlags: CallReducerFlags = 'FullUpdate';
  spawnLootCapsule(flags: CallReducerFlags) {
    this.spawnLootCapsuleFlags = flags;
  }

  spawnMonsterFlags: CallReducerFlags = 'FullUpdate';
  spawnMonster(flags: CallReducerFlags) {
    this.spawnMonsterFlags = flags;
  }

  spawnPlayerFlags: CallReducerFlags = 'FullUpdate';
  spawnPlayer(flags: CallReducerFlags) {
    this.spawnPlayerFlags = flags;
  }

  transitionDeadToChoosingClassFlags: CallReducerFlags = 'FullUpdate';
  transitionDeadToChoosingClass(flags: CallReducerFlags) {
    this.transitionDeadToChoosingClassFlags = flags;
  }

  transitionWinnerToChoosingClassFlags: CallReducerFlags = 'FullUpdate';
  transitionWinnerToChoosingClass(flags: CallReducerFlags) {
    this.transitionWinnerToChoosingClassFlags = flags;
  }

  triggerAgnaCandleBoltFlags: CallReducerFlags = 'FullUpdate';
  triggerAgnaCandleBolt(flags: CallReducerFlags) {
    this.triggerAgnaCandleBoltFlags = flags;
  }

  triggerAgnaFireOrbAttackFlags: CallReducerFlags = 'FullUpdate';
  triggerAgnaFireOrbAttack(flags: CallReducerFlags) {
    this.triggerAgnaFireOrbAttackFlags = flags;
  }

  triggerAgnaFlamethrowerAttackFlags: CallReducerFlags = 'FullUpdate';
  triggerAgnaFlamethrowerAttack(flags: CallReducerFlags) {
    this.triggerAgnaFlamethrowerAttackFlags = flags;
  }

  triggerAgnaPhase2FlamethrowerAttackFlags: CallReducerFlags = 'FullUpdate';
  triggerAgnaPhase2FlamethrowerAttack(flags: CallReducerFlags) {
    this.triggerAgnaPhase2FlamethrowerAttackFlags = flags;
  }

  triggerAgnaTargetSwitchFlags: CallReducerFlags = 'FullUpdate';
  triggerAgnaTargetSwitch(flags: CallReducerFlags) {
    this.triggerAgnaTargetSwitchFlags = flags;
  }

  triggerBossTargetSwitchFlags: CallReducerFlags = 'FullUpdate';
  triggerBossTargetSwitch(flags: CallReducerFlags) {
    this.triggerBossTargetSwitchFlags = flags;
  }

  triggerChaosBallAttackFlags: CallReducerFlags = 'FullUpdate';
  triggerChaosBallAttack(flags: CallReducerFlags) {
    this.triggerChaosBallAttackFlags = flags;
  }

  triggerEnderBoltAttackFlags: CallReducerFlags = 'FullUpdate';
  triggerEnderBoltAttack(flags: CallReducerFlags) {
    this.triggerEnderBoltAttackFlags = flags;
  }

  triggerImpAttackFlags: CallReducerFlags = 'FullUpdate';
  triggerImpAttack(flags: CallReducerFlags) {
    this.triggerImpAttackFlags = flags;
  }

  triggerVoidZoneAttackFlags: CallReducerFlags = 'FullUpdate';
  triggerVoidZoneAttack(flags: CallReducerFlags) {
    this.triggerVoidZoneAttackFlags = flags;
  }

  updateLastLoginFlags: CallReducerFlags = 'FullUpdate';
  updateLastLogin(flags: CallReducerFlags) {
    this.updateLastLoginFlags = flags;
  }

}

export class RemoteTables {
  constructor(private connection: DbConnectionImpl) {}

  get account(): AccountTableHandle {
    return new AccountTableHandle(this.connection.clientCache.getOrCreateTable<Account>(REMOTE_MODULE.tables.account));
  }

  get activeAttackCleanup(): ActiveAttackCleanupTableHandle {
    return new ActiveAttackCleanupTableHandle(this.connection.clientCache.getOrCreateTable<ActiveAttackCleanup>(REMOTE_MODULE.tables.active_attack_cleanup));
  }

  get activeAttacks(): ActiveAttacksTableHandle {
    return new ActiveAttacksTableHandle(this.connection.clientCache.getOrCreateTable<ActiveAttack>(REMOTE_MODULE.tables.active_attacks));
  }

  get activeMonsterAttacks(): ActiveMonsterAttacksTableHandle {
    return new ActiveMonsterAttacksTableHandle(this.connection.clientCache.getOrCreateTable<ActiveMonsterAttack>(REMOTE_MODULE.tables.active_monster_attacks));
  }

  get agnaCandleBoltScheduler(): AgnaCandleBoltSchedulerTableHandle {
    return new AgnaCandleBoltSchedulerTableHandle(this.connection.clientCache.getOrCreateTable<AgnaCandleBoltScheduler>(REMOTE_MODULE.tables.agna_candle_bolt_scheduler));
  }

  get agnaCandleScheduler(): AgnaCandleSchedulerTableHandle {
    return new AgnaCandleSchedulerTableHandle(this.connection.clientCache.getOrCreateTable<AgnaCandleScheduler>(REMOTE_MODULE.tables.agna_candle_scheduler));
  }

  get agnaCandleSpawns(): AgnaCandleSpawnsTableHandle {
    return new AgnaCandleSpawnsTableHandle(this.connection.clientCache.getOrCreateTable<AgnaCandleSpawn>(REMOTE_MODULE.tables.agna_candle_spawns));
  }

  get agnaDelayedOrbScheduler(): AgnaDelayedOrbSchedulerTableHandle {
    return new AgnaDelayedOrbSchedulerTableHandle(this.connection.clientCache.getOrCreateTable<AgnaDelayedOrbScheduler>(REMOTE_MODULE.tables.agna_delayed_orb_scheduler));
  }

  get agnaFireOrbScheduler(): AgnaFireOrbSchedulerTableHandle {
    return new AgnaFireOrbSchedulerTableHandle(this.connection.clientCache.getOrCreateTable<AgnaFireOrbScheduler>(REMOTE_MODULE.tables.agna_fire_orb_scheduler));
  }

  get agnaFlamethrowerScheduler(): AgnaFlamethrowerSchedulerTableHandle {
    return new AgnaFlamethrowerSchedulerTableHandle(this.connection.clientCache.getOrCreateTable<AgnaFlamethrowerScheduler>(REMOTE_MODULE.tables.agna_flamethrower_scheduler));
  }

  get agnaMagicCircles(): AgnaMagicCirclesTableHandle {
    return new AgnaMagicCirclesTableHandle(this.connection.clientCache.getOrCreateTable<AgnaMagicCircle>(REMOTE_MODULE.tables.agna_magic_circles));
  }

  get agnaPhase2FlamethrowerScheduler(): AgnaPhase2FlamethrowerSchedulerTableHandle {
    return new AgnaPhase2FlamethrowerSchedulerTableHandle(this.connection.clientCache.getOrCreateTable<AgnaPhase2FlamethrowerScheduler>(REMOTE_MODULE.tables.agna_phase2_flamethrower_scheduler));
  }

  get agnaRitualCompletionCheck(): AgnaRitualCompletionCheckTableHandle {
    return new AgnaRitualCompletionCheckTableHandle(this.connection.clientCache.getOrCreateTable<AgnaRitualCompletionCheck>(REMOTE_MODULE.tables.agna_ritual_completion_check));
  }

  get agnaSummoningCircleSpawner(): AgnaSummoningCircleSpawnerTableHandle {
    return new AgnaSummoningCircleSpawnerTableHandle(this.connection.clientCache.getOrCreateTable<AgnaSummoningCircleSpawner>(REMOTE_MODULE.tables.agna_summoning_circle_spawner));
  }

  get agnaTargetSwitchScheduler(): AgnaTargetSwitchSchedulerTableHandle {
    return new AgnaTargetSwitchSchedulerTableHandle(this.connection.clientCache.getOrCreateTable<AgnaTargetSwitchScheduler>(REMOTE_MODULE.tables.agna_target_switch_scheduler));
  }

  get attackBurstCooldowns(): AttackBurstCooldownsTableHandle {
    return new AttackBurstCooldownsTableHandle(this.connection.clientCache.getOrCreateTable<AttackBurstCooldown>(REMOTE_MODULE.tables.attack_burst_cooldowns));
  }

  get attackData(): AttackDataTableHandle {
    return new AttackDataTableHandle(this.connection.clientCache.getOrCreateTable<AttackData>(REMOTE_MODULE.tables.attack_data));
  }

  get bestiary(): BestiaryTableHandle {
    return new BestiaryTableHandle(this.connection.clientCache.getOrCreateTable<Bestiary>(REMOTE_MODULE.tables.bestiary));
  }

  get bossAgnaLastPatterns(): BossAgnaLastPatternsTableHandle {
    return new BossAgnaLastPatternsTableHandle(this.connection.clientCache.getOrCreateTable<BossAgnaLastPattern>(REMOTE_MODULE.tables.boss_agna_last_patterns));
  }

  get bossEnderLastPatterns(): BossEnderLastPatternsTableHandle {
    return new BossEnderLastPatternsTableHandle(this.connection.clientCache.getOrCreateTable<BossEnderLastPattern>(REMOTE_MODULE.tables.boss_ender_last_patterns));
  }

  get bossPhaseTwoTimer(): BossPhaseTwoTimerTableHandle {
    return new BossPhaseTwoTimerTableHandle(this.connection.clientCache.getOrCreateTable<BossPhase2Timer>(REMOTE_MODULE.tables.boss_phase_two_timer));
  }

  get bossSelection(): BossSelectionTableHandle {
    return new BossSelectionTableHandle(this.connection.clientCache.getOrCreateTable<BossSelection>(REMOTE_MODULE.tables.boss_selection));
  }

  get bossSpawnTimer(): BossSpawnTimerTableHandle {
    return new BossSpawnTimerTableHandle(this.connection.clientCache.getOrCreateTable<BossSpawnTimer>(REMOTE_MODULE.tables.boss_spawn_timer));
  }

  get bossTargetSwitchScheduler(): BossTargetSwitchSchedulerTableHandle {
    return new BossTargetSwitchSchedulerTableHandle(this.connection.clientCache.getOrCreateTable<BossTargetSwitchScheduler>(REMOTE_MODULE.tables.boss_target_switch_scheduler));
  }

  get chaosBallScheduler(): ChaosBallSchedulerTableHandle {
    return new ChaosBallSchedulerTableHandle(this.connection.clientCache.getOrCreateTable<ChaosBallScheduler>(REMOTE_MODULE.tables.chaos_ball_scheduler));
  }

  get chosenUpgrades(): ChosenUpgradesTableHandle {
    return new ChosenUpgradesTableHandle(this.connection.clientCache.getOrCreateTable<ChosenUpgradeData>(REMOTE_MODULE.tables.chosen_upgrades));
  }

  get classData(): ClassDataTableHandle {
    return new ClassDataTableHandle(this.connection.clientCache.getOrCreateTable<ClassData>(REMOTE_MODULE.tables.class_data));
  }

  get config(): ConfigTableHandle {
    return new ConfigTableHandle(this.connection.clientCache.getOrCreateTable<Config>(REMOTE_MODULE.tables.config));
  }

  get curses(): CursesTableHandle {
    return new CursesTableHandle(this.connection.clientCache.getOrCreateTable<Curse>(REMOTE_MODULE.tables.curses));
  }

  get deadPlayerTransitionTimer(): DeadPlayerTransitionTimerTableHandle {
    return new DeadPlayerTransitionTimerTableHandle(this.connection.clientCache.getOrCreateTable<DeadPlayerTransitionTimer>(REMOTE_MODULE.tables.dead_player_transition_timer));
  }

  get deadPlayers(): DeadPlayersTableHandle {
    return new DeadPlayersTableHandle(this.connection.clientCache.getOrCreateTable<DeadPlayer>(REMOTE_MODULE.tables.dead_players));
  }

  get enderBoltScheduler(): EnderBoltSchedulerTableHandle {
    return new EnderBoltSchedulerTableHandle(this.connection.clientCache.getOrCreateTable<EnderBoltScheduler>(REMOTE_MODULE.tables.ender_bolt_scheduler));
  }

  get enderClawSpawner(): EnderClawSpawnerTableHandle {
    return new EnderClawSpawnerTableHandle(this.connection.clientCache.getOrCreateTable<EnderClawSpawner>(REMOTE_MODULE.tables.ender_claw_spawner));
  }

  get enderScytheScheduler(): EnderScytheSchedulerTableHandle {
    return new EnderScytheSchedulerTableHandle(this.connection.clientCache.getOrCreateTable<EnderScytheScheduler>(REMOTE_MODULE.tables.ender_scythe_scheduler));
  }

  get enderScytheSpawnScheduler(): EnderScytheSpawnSchedulerTableHandle {
    return new EnderScytheSpawnSchedulerTableHandle(this.connection.clientCache.getOrCreateTable<EnderScytheSpawnScheduler>(REMOTE_MODULE.tables.ender_scythe_spawn_scheduler));
  }

  get entity(): EntityTableHandle {
    return new EntityTableHandle(this.connection.clientCache.getOrCreateTable<Entity>(REMOTE_MODULE.tables.entity));
  }

  get expConfig(): ExpConfigTableHandle {
    return new ExpConfigTableHandle(this.connection.clientCache.getOrCreateTable<ExpConfig>(REMOTE_MODULE.tables.exp_config));
  }

  get foundLoreScrolls(): FoundLoreScrollsTableHandle {
    return new FoundLoreScrollsTableHandle(this.connection.clientCache.getOrCreateTable<FoundLoreScrolls>(REMOTE_MODULE.tables.found_lore_scrolls));
  }

  get gameState(): GameStateTableHandle {
    return new GameStateTableHandle(this.connection.clientCache.getOrCreateTable<GameState>(REMOTE_MODULE.tables.game_state));
  }

  get gameTickTimer(): GameTickTimerTableHandle {
    return new GameTickTimerTableHandle(this.connection.clientCache.getOrCreateTable<GameTickTimer>(REMOTE_MODULE.tables.game_tick_timer));
  }

  get gems(): GemsTableHandle {
    return new GemsTableHandle(this.connection.clientCache.getOrCreateTable<Gem>(REMOTE_MODULE.tables.gems));
  }

  get guaranteedVoidChestSpawns(): GuaranteedVoidChestSpawnsTableHandle {
    return new GuaranteedVoidChestSpawnsTableHandle(this.connection.clientCache.getOrCreateTable<GuaranteedVoidChestSpawn>(REMOTE_MODULE.tables.guaranteed_void_chest_spawns));
  }

  get healthRegenScheduler(): HealthRegenSchedulerTableHandle {
    return new HealthRegenSchedulerTableHandle(this.connection.clientCache.getOrCreateTable<HealthRegenScheduler>(REMOTE_MODULE.tables.health_regen_scheduler));
  }

  get impAttackScheduler(): ImpAttackSchedulerTableHandle {
    return new ImpAttackSchedulerTableHandle(this.connection.clientCache.getOrCreateTable<ImpAttackScheduler>(REMOTE_MODULE.tables.imp_attack_scheduler));
  }

  get lootCapsules(): LootCapsulesTableHandle {
    return new LootCapsulesTableHandle(this.connection.clientCache.getOrCreateTable<LootCapsules>(REMOTE_MODULE.tables.loot_capsules));
  }

  get monsterDamage(): MonsterDamageTableHandle {
    return new MonsterDamageTableHandle(this.connection.clientCache.getOrCreateTable<MonsterDamage>(REMOTE_MODULE.tables.monster_damage));
  }

  get monsterHitCleanup(): MonsterHitCleanupTableHandle {
    return new MonsterHitCleanupTableHandle(this.connection.clientCache.getOrCreateTable<MonsterHitCleanup>(REMOTE_MODULE.tables.monster_hit_cleanup));
  }

  get monsterSpawnTimer(): MonsterSpawnTimerTableHandle {
    return new MonsterSpawnTimerTableHandle(this.connection.clientCache.getOrCreateTable<MonsterSpawnTimer>(REMOTE_MODULE.tables.monster_spawn_timer));
  }

  get monsterSpawners(): MonsterSpawnersTableHandle {
    return new MonsterSpawnersTableHandle(this.connection.clientCache.getOrCreateTable<MonsterSpawners>(REMOTE_MODULE.tables.monster_spawners));
  }

  get monsterStateChanges(): MonsterStateChangesTableHandle {
    return new MonsterStateChangesTableHandle(this.connection.clientCache.getOrCreateTable<MonsterStateChange>(REMOTE_MODULE.tables.monster_state_changes));
  }

  get monsters(): MonstersTableHandle {
    return new MonstersTableHandle(this.connection.clientCache.getOrCreateTable<Monsters>(REMOTE_MODULE.tables.monsters));
  }

  get monstersBoid(): MonstersBoidTableHandle {
    return new MonstersBoidTableHandle(this.connection.clientCache.getOrCreateTable<MonsterBoid>(REMOTE_MODULE.tables.monsters_boid));
  }

  get player(): PlayerTableHandle {
    return new PlayerTableHandle(this.connection.clientCache.getOrCreateTable<Player>(REMOTE_MODULE.tables.player));
  }

  get playerScheduledAttacks(): PlayerScheduledAttacksTableHandle {
    return new PlayerScheduledAttacksTableHandle(this.connection.clientCache.getOrCreateTable<PlayerScheduledAttack>(REMOTE_MODULE.tables.player_scheduled_attacks));
  }

  get savedAttacks(): SavedAttacksTableHandle {
    return new SavedAttacksTableHandle(this.connection.clientCache.getOrCreateTable<SavedAttack>(REMOTE_MODULE.tables.saved_attacks));
  }

  get savedBuild(): SavedBuildTableHandle {
    return new SavedBuildTableHandle(this.connection.clientCache.getOrCreateTable<SavedBuild>(REMOTE_MODULE.tables.saved_build));
  }

  get upgradeOptions(): UpgradeOptionsTableHandle {
    return new UpgradeOptionsTableHandle(this.connection.clientCache.getOrCreateTable<UpgradeOptionData>(REMOTE_MODULE.tables.upgrade_options));
  }

  get voidZoneScheduler(): VoidZoneSchedulerTableHandle {
    return new VoidZoneSchedulerTableHandle(this.connection.clientCache.getOrCreateTable<VoidZoneScheduler>(REMOTE_MODULE.tables.void_zone_scheduler));
  }

  get winnerTransitionTimer(): WinnerTransitionTimerTableHandle {
    return new WinnerTransitionTimerTableHandle(this.connection.clientCache.getOrCreateTable<WinnerTransitionTimer>(REMOTE_MODULE.tables.winner_transition_timer));
  }

  get world(): WorldTableHandle {
    return new WorldTableHandle(this.connection.clientCache.getOrCreateTable<World>(REMOTE_MODULE.tables.world));
  }
}

export class SubscriptionBuilder extends SubscriptionBuilderImpl<RemoteTables, RemoteReducers, SetReducerFlags> { }

export class DbConnection extends DbConnectionImpl<RemoteTables, RemoteReducers, SetReducerFlags> {
  static builder = (): DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext> => {
    return new DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext>(REMOTE_MODULE, (imp: DbConnectionImpl) => imp as DbConnection);
  }
  subscriptionBuilder = (): SubscriptionBuilder => {
    return new SubscriptionBuilder(this);
  }
}

export type EventContext = EventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type ReducerEventContext = ReducerEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type SubscriptionEventContext = SubscriptionEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
export type ErrorContext = ErrorContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
