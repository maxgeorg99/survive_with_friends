// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  CallReducerFlags,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  DbContext,
  ErrorContextInterface,
  Event,
  EventContextInterface,
  Identity,
  ProductType,
  ProductTypeElement,
  ReducerEventContextInterface,
  SubscriptionBuilderImpl,
  SubscriptionEventContextInterface,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
} from "@clockworklabs/spacetimedb-sdk";
// A namespace for generated variants and helper functions.
export namespace AccountState {
  // These are the generated variant types for each variant of the tagged union.
  // One type is generated per variant and will be used in the `value` field of
  // the tagged union.
  export type ChoosingName = { tag: "ChoosingName" };
  export type ChoosingClass = { tag: "ChoosingClass" };
  export type Playing = { tag: "Playing" };
  export type Dead = { tag: "Dead" };
  export type Winner = { tag: "Winner" };

  // Helper functions for constructing each variant of the tagged union.
  // ```
  // const foo = Foo.A(42);
  // assert!(foo.tag === "A");
  // assert!(foo.value === 42);
  // ```
  export const ChoosingName = { tag: "ChoosingName" };
  export const ChoosingClass = { tag: "ChoosingClass" };
  export const Playing = { tag: "Playing" };
  export const Dead = { tag: "Dead" };
  export const Winner = { tag: "Winner" };

  export function getTypeScriptAlgebraicType(): AlgebraicType {
    return AlgebraicType.createSumType([
      new SumTypeVariant("ChoosingName", AlgebraicType.createProductType([])),
      new SumTypeVariant("ChoosingClass", AlgebraicType.createProductType([])),
      new SumTypeVariant("Playing", AlgebraicType.createProductType([])),
      new SumTypeVariant("Dead", AlgebraicType.createProductType([])),
      new SumTypeVariant("Winner", AlgebraicType.createProductType([])),
    ]);
  }

  export function serialize(writer: BinaryWriter, value: AccountState): void {
      AccountState.getTypeScriptAlgebraicType().serialize(writer, value);
  }

  export function deserialize(reader: BinaryReader): AccountState {
      return AccountState.getTypeScriptAlgebraicType().deserialize(reader);
  }

}

// The tagged union or sum type for the algebraic type `AccountState`.
export type AccountState = AccountState.ChoosingName | AccountState.ChoosingClass | AccountState.Playing | AccountState.Dead | AccountState.Winner;

export default AccountState;

