// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  CallReducerFlags,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  DbContext,
  ErrorContextInterface,
  Event,
  EventContextInterface,
  Identity,
  ProductType,
  ProductTypeElement,
  ReducerEventContextInterface,
  SubscriptionBuilderImpl,
  SubscriptionEventContextInterface,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
} from "@clockworklabs/spacetimedb-sdk";
// A namespace for generated variants and helper functions.
export namespace UpgradeType {
  // These are the generated variant types for each variant of the tagged union.
  // One type is generated per variant and will be used in the `value` field of
  // the tagged union.
  export type MaxHp = { tag: "MaxHp" };
  export type HpRegen = { tag: "HpRegen" };
  export type Speed = { tag: "Speed" };
  export type Armor = { tag: "Armor" };
  export type AttackSword = { tag: "AttackSword" };
  export type AttackWand = { tag: "AttackWand" };
  export type AttackKnives = { tag: "AttackKnives" };
  export type AttackShield = { tag: "AttackShield" };

  // Helper functions for constructing each variant of the tagged union.
  // ```
  // const foo = Foo.A(42);
  // assert!(foo.tag === "A");
  // assert!(foo.value === 42);
  // ```
  export const MaxHp = { tag: "MaxHp" };
  export const HpRegen = { tag: "HpRegen" };
  export const Speed = { tag: "Speed" };
  export const Armor = { tag: "Armor" };
  export const AttackSword = { tag: "AttackSword" };
  export const AttackWand = { tag: "AttackWand" };
  export const AttackKnives = { tag: "AttackKnives" };
  export const AttackShield = { tag: "AttackShield" };

  export function getTypeScriptAlgebraicType(): AlgebraicType {
    return AlgebraicType.createSumType([
      new SumTypeVariant("MaxHp", AlgebraicType.createProductType([])),
      new SumTypeVariant("HpRegen", AlgebraicType.createProductType([])),
      new SumTypeVariant("Speed", AlgebraicType.createProductType([])),
      new SumTypeVariant("Armor", AlgebraicType.createProductType([])),
      new SumTypeVariant("AttackSword", AlgebraicType.createProductType([])),
      new SumTypeVariant("AttackWand", AlgebraicType.createProductType([])),
      new SumTypeVariant("AttackKnives", AlgebraicType.createProductType([])),
      new SumTypeVariant("AttackShield", AlgebraicType.createProductType([])),
    ]);
  }

  export function serialize(writer: BinaryWriter, value: UpgradeType): void {
      UpgradeType.getTypeScriptAlgebraicType().serialize(writer, value);
  }

  export function deserialize(reader: BinaryReader): UpgradeType {
      return UpgradeType.getTypeScriptAlgebraicType().deserialize(reader);
  }

}

// The tagged union or sum type for the algebraic type `UpgradeType`.
export type UpgradeType = UpgradeType.MaxHp | UpgradeType.HpRegen | UpgradeType.Speed | UpgradeType.Armor | UpgradeType.AttackSword | UpgradeType.AttackWand | UpgradeType.AttackKnives | UpgradeType.AttackShield;

export default UpgradeType;

