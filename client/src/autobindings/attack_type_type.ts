// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  CallReducerFlags,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  DbContext,
  ErrorContextInterface,
  Event,
  EventContextInterface,
  Identity,
  ProductType,
  ProductTypeElement,
  ReducerEventContextInterface,
  SubscriptionBuilderImpl,
  SubscriptionEventContextInterface,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
} from "@clockworklabs/spacetimedb-sdk";
// A namespace for generated variants and helper functions.
export namespace AttackType {
  // These are the generated variant types for each variant of the tagged union.
  // One type is generated per variant and will be used in the `value` field of
  // the tagged union.
  export type Sword = { tag: "Sword" };
  export type Wand = { tag: "Wand" };
  export type Knives = { tag: "Knives" };
  export type Shield = { tag: "Shield" };
  export type ThunderHorn = { tag: "ThunderHorn" };
  export type AngelStaff = { tag: "AngelStaff" };
  export type Football = { tag: "Football" };
  export type Cards = { tag: "Cards" };
  export type Dumbbell = { tag: "Dumbbell" };
  export type Garlic = { tag: "Garlic" };
  export type Volleyball = { tag: "Volleyball" };
  export type Joint = { tag: "Joint" };

  // Helper functions for constructing each variant of the tagged union.
  // ```
  // const foo = Foo.A(42);
  // assert!(foo.tag === "A");
  // assert!(foo.value === 42);
  // ```
  export const Sword = { tag: "Sword" };
  export const Wand = { tag: "Wand" };
  export const Knives = { tag: "Knives" };
  export const Shield = { tag: "Shield" };
  export const ThunderHorn = { tag: "ThunderHorn" };
  export const AngelStaff = { tag: "AngelStaff" };
  export const Football = { tag: "Football" };
  export const Cards = { tag: "Cards" };
  export const Dumbbell = { tag: "Dumbbell" };
  export const Garlic = { tag: "Garlic" };
  export const Volleyball = { tag: "Volleyball" };
  export const Joint = { tag: "Joint" };

  export function getTypeScriptAlgebraicType(): AlgebraicType {
    return AlgebraicType.createSumType([
      new SumTypeVariant("Sword", AlgebraicType.createProductType([])),
      new SumTypeVariant("Wand", AlgebraicType.createProductType([])),
      new SumTypeVariant("Knives", AlgebraicType.createProductType([])),
      new SumTypeVariant("Shield", AlgebraicType.createProductType([])),
      new SumTypeVariant("ThunderHorn", AlgebraicType.createProductType([])),
      new SumTypeVariant("AngelStaff", AlgebraicType.createProductType([])),
      new SumTypeVariant("Football", AlgebraicType.createProductType([])),
      new SumTypeVariant("Cards", AlgebraicType.createProductType([])),
      new SumTypeVariant("Dumbbell", AlgebraicType.createProductType([])),
      new SumTypeVariant("Garlic", AlgebraicType.createProductType([])),
      new SumTypeVariant("Volleyball", AlgebraicType.createProductType([])),
      new SumTypeVariant("Joint", AlgebraicType.createProductType([])),
    ]);
  }

  export function serialize(writer: BinaryWriter, value: AttackType): void {
      AttackType.getTypeScriptAlgebraicType().serialize(writer, value);
  }

  export function deserialize(reader: BinaryReader): AttackType {
      return AttackType.getTypeScriptAlgebraicType().deserialize(reader);
  }

}

// The tagged union or sum type for the algebraic type `AttackType`.
export type AttackType = AttackType.Sword | AttackType.Wand | AttackType.Knives | AttackType.Shield | AttackType.ThunderHorn | AttackType.AngelStaff | AttackType.Football | AttackType.Cards | AttackType.Dumbbell | AttackType.Garlic | AttackType.Volleyball | AttackType.Joint;

export default AttackType;

