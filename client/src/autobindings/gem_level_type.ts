// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  CallReducerFlags,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  DbContext,
  ErrorContextInterface,
  Event,
  EventContextInterface,
  Identity,
  ProductType,
  ProductTypeElement,
  ReducerEventContextInterface,
  SubscriptionBuilderImpl,
  SubscriptionEventContextInterface,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
} from "@clockworklabs/spacetimedb-sdk";
// A namespace for generated variants and helper functions.
export namespace GemLevel {
  // These are the generated variant types for each variant of the tagged union.
  // One type is generated per variant and will be used in the `value` field of
  // the tagged union.
  export type Small = { tag: "Small" };
  export type Medium = { tag: "Medium" };
  export type Large = { tag: "Large" };
  export type Huge = { tag: "Huge" };
  export type Soul = { tag: "Soul" };
  export type Fries = { tag: "Fries" };
  export type Dice = { tag: "Dice" };
  export type BoosterPack = { tag: "BoosterPack" };

  // Helper functions for constructing each variant of the tagged union.
  // ```
  // const foo = Foo.A(42);
  // assert!(foo.tag === "A");
  // assert!(foo.value === 42);
  // ```
  export const Small = { tag: "Small" };
  export const Medium = { tag: "Medium" };
  export const Large = { tag: "Large" };
  export const Huge = { tag: "Huge" };
  export const Soul = { tag: "Soul" };
  export const Fries = { tag: "Fries" };
  export const Dice = { tag: "Dice" };
  export const BoosterPack = { tag: "BoosterPack" };

  export function getTypeScriptAlgebraicType(): AlgebraicType {
    return AlgebraicType.createSumType([
      new SumTypeVariant("Small", AlgebraicType.createProductType([])),
      new SumTypeVariant("Medium", AlgebraicType.createProductType([])),
      new SumTypeVariant("Large", AlgebraicType.createProductType([])),
      new SumTypeVariant("Huge", AlgebraicType.createProductType([])),
      new SumTypeVariant("Soul", AlgebraicType.createProductType([])),
      new SumTypeVariant("Fries", AlgebraicType.createProductType([])),
      new SumTypeVariant("Dice", AlgebraicType.createProductType([])),
      new SumTypeVariant("BoosterPack", AlgebraicType.createProductType([])),
    ]);
  }

  export function serialize(writer: BinaryWriter, value: GemLevel): void {
      GemLevel.getTypeScriptAlgebraicType().serialize(writer, value);
  }

  export function deserialize(reader: BinaryReader): GemLevel {
      return GemLevel.getTypeScriptAlgebraicType().deserialize(reader);
  }

}

// The tagged union or sum type for the algebraic type `GemLevel`.
export type GemLevel = GemLevel.Small | GemLevel.Medium | GemLevel.Large | GemLevel.Huge | GemLevel.Soul | GemLevel.Fries | GemLevel.Dice | GemLevel.BoosterPack;

export default GemLevel;

