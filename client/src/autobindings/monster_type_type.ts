// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  CallReducerFlags,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  DbContext,
  ErrorContextInterface,
  Event,
  EventContextInterface,
  Identity,
  ProductType,
  ProductTypeElement,
  ReducerEventContextInterface,
  SubscriptionBuilderImpl,
  SubscriptionEventContextInterface,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
} from "@clockworklabs/spacetimedb-sdk";
// A namespace for generated variants and helper functions.
export namespace MonsterType {
  // These are the generated variant types for each variant of the tagged union.
  // One type is generated per variant and will be used in the `value` field of
  // the tagged union.
  export type Rat = { tag: "Rat" };
  export type Slime = { tag: "Slime" };
  export type Bat = { tag: "Bat" };
  export type Orc = { tag: "Orc" };
  export type Imp = { tag: "Imp" };
  export type Zombie = { tag: "Zombie" };
  export type VoidChest = { tag: "VoidChest" };
  export type EnderClaw = { tag: "EnderClaw" };
  export type FinalBossPhase1 = { tag: "FinalBossPhase1" };
  export type FinalBossPhase2 = { tag: "FinalBossPhase2" };

  // Helper functions for constructing each variant of the tagged union.
  // ```
  // const foo = Foo.A(42);
  // assert!(foo.tag === "A");
  // assert!(foo.value === 42);
  // ```
  export const Rat = { tag: "Rat" };
  export const Slime = { tag: "Slime" };
  export const Bat = { tag: "Bat" };
  export const Orc = { tag: "Orc" };
  export const Imp = { tag: "Imp" };
  export const Zombie = { tag: "Zombie" };
  export const VoidChest = { tag: "VoidChest" };
  export const EnderClaw = { tag: "EnderClaw" };
  export const FinalBossPhase1 = { tag: "FinalBossPhase1" };
  export const FinalBossPhase2 = { tag: "FinalBossPhase2" };

  export function getTypeScriptAlgebraicType(): AlgebraicType {
    return AlgebraicType.createSumType([
      new SumTypeVariant("Rat", AlgebraicType.createProductType([])),
      new SumTypeVariant("Slime", AlgebraicType.createProductType([])),
      new SumTypeVariant("Bat", AlgebraicType.createProductType([])),
      new SumTypeVariant("Orc", AlgebraicType.createProductType([])),
      new SumTypeVariant("Imp", AlgebraicType.createProductType([])),
      new SumTypeVariant("Zombie", AlgebraicType.createProductType([])),
      new SumTypeVariant("VoidChest", AlgebraicType.createProductType([])),
      new SumTypeVariant("EnderClaw", AlgebraicType.createProductType([])),
      new SumTypeVariant("FinalBossPhase1", AlgebraicType.createProductType([])),
      new SumTypeVariant("FinalBossPhase2", AlgebraicType.createProductType([])),
    ]);
  }

  export function serialize(writer: BinaryWriter, value: MonsterType): void {
      MonsterType.getTypeScriptAlgebraicType().serialize(writer, value);
  }

  export function deserialize(reader: BinaryReader): MonsterType {
      return MonsterType.getTypeScriptAlgebraicType().deserialize(reader);
  }

}

// The tagged union or sum type for the algebraic type `MonsterType`.
export type MonsterType = MonsterType.Rat | MonsterType.Slime | MonsterType.Bat | MonsterType.Orc | MonsterType.Imp | MonsterType.Zombie | MonsterType.VoidChest | MonsterType.EnderClaw | MonsterType.FinalBossPhase1 | MonsterType.FinalBossPhase2;

export default MonsterType;

