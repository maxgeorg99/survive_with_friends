// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  CallReducerFlags,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  DbContext,
  ErrorContextInterface,
  Event,
  EventContextInterface,
  Identity,
  ProductType,
  ProductTypeElement,
  ReducerEventContextInterface,
  SubscriptionBuilderImpl,
  SubscriptionEventContextInterface,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
} from "@clockworklabs/spacetimedb-sdk";
// A namespace for generated variants and helper functions.
export namespace AiState {
  // These are the generated variant types for each variant of the tagged union.
  // One type is generated per variant and will be used in the `value` field of
  // the tagged union.
  export type Default = { tag: "Default" };
  export type BossIdle = { tag: "BossIdle" };
  export type BossChase = { tag: "BossChase" };
  export type BossDance = { tag: "BossDance" };
  export type BossVanish = { tag: "BossVanish" };
  export type BossTeleport = { tag: "BossTeleport" };
  export type BossTransform = { tag: "BossTransform" };
  export type Stationary = { tag: "Stationary" };

  // Helper functions for constructing each variant of the tagged union.
  // ```
  // const foo = Foo.A(42);
  // assert!(foo.tag === "A");
  // assert!(foo.value === 42);
  // ```
  export const Default = { tag: "Default" };
  export const BossIdle = { tag: "BossIdle" };
  export const BossChase = { tag: "BossChase" };
  export const BossDance = { tag: "BossDance" };
  export const BossVanish = { tag: "BossVanish" };
  export const BossTeleport = { tag: "BossTeleport" };
  export const BossTransform = { tag: "BossTransform" };
  export const Stationary = { tag: "Stationary" };

  export function getTypeScriptAlgebraicType(): AlgebraicType {
    return AlgebraicType.createSumType([
      new SumTypeVariant("Default", AlgebraicType.createProductType([])),
      new SumTypeVariant("BossIdle", AlgebraicType.createProductType([])),
      new SumTypeVariant("BossChase", AlgebraicType.createProductType([])),
      new SumTypeVariant("BossDance", AlgebraicType.createProductType([])),
      new SumTypeVariant("BossVanish", AlgebraicType.createProductType([])),
      new SumTypeVariant("BossTeleport", AlgebraicType.createProductType([])),
      new SumTypeVariant("BossTransform", AlgebraicType.createProductType([])),
      new SumTypeVariant("Stationary", AlgebraicType.createProductType([])),
    ]);
  }

  export function serialize(writer: BinaryWriter, value: AiState): void {
      AiState.getTypeScriptAlgebraicType().serialize(writer, value);
  }

  export function deserialize(reader: BinaryReader): AiState {
      return AiState.getTypeScriptAlgebraicType().deserialize(reader);
  }

}

// The tagged union or sum type for the algebraic type `AiState`.
export type AiState = AiState.Default | AiState.BossIdle | AiState.BossChase | AiState.BossDance | AiState.BossVanish | AiState.BossTeleport | AiState.BossTransform | AiState.Stationary;

export default AiState;

