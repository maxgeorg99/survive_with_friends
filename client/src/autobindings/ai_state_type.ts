// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  CallReducerFlags,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  DbContext,
  ErrorContextInterface,
  Event,
  EventContextInterface,
  Identity,
  ProductType,
  ProductTypeElement,
  ReducerEventContextInterface,
  SubscriptionBuilderImpl,
  SubscriptionEventContextInterface,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
} from "@clockworklabs/spacetimedb-sdk";
// A namespace for generated variants and helper functions.
export namespace AiState {
  // These are the generated variant types for each variant of the tagged union.
  // One type is generated per variant and will be used in the `value` field of
  // the tagged union.
  export type Default = { tag: "Default" };
  export type BossEnderIdle = { tag: "BossEnderIdle" };
  export type BossEnderChase = { tag: "BossEnderChase" };
  export type BossEnderDance = { tag: "BossEnderDance" };
  export type BossEnderVanish = { tag: "BossEnderVanish" };
  export type BossEnderLurk = { tag: "BossEnderLurk" };
  export type BossEnderTeleport = { tag: "BossEnderTeleport" };
  export type BossEnderTransform = { tag: "BossEnderTransform" };
  export type Stationary = { tag: "Stationary" };

  // Helper functions for constructing each variant of the tagged union.
  // ```
  // const foo = Foo.A(42);
  // assert!(foo.tag === "A");
  // assert!(foo.value === 42);
  // ```
  export const Default = { tag: "Default" };
  export const BossEnderIdle = { tag: "BossEnderIdle" };
  export const BossEnderChase = { tag: "BossEnderChase" };
  export const BossEnderDance = { tag: "BossEnderDance" };
  export const BossEnderVanish = { tag: "BossEnderVanish" };
  export const BossEnderLurk = { tag: "BossEnderLurk" };
  export const BossEnderTeleport = { tag: "BossEnderTeleport" };
  export const BossEnderTransform = { tag: "BossEnderTransform" };
  export const Stationary = { tag: "Stationary" };

  export function getTypeScriptAlgebraicType(): AlgebraicType {
    return AlgebraicType.createSumType([
      new SumTypeVariant("Default", AlgebraicType.createProductType([])),
      new SumTypeVariant("BossEnderIdle", AlgebraicType.createProductType([])),
      new SumTypeVariant("BossEnderChase", AlgebraicType.createProductType([])),
      new SumTypeVariant("BossEnderDance", AlgebraicType.createProductType([])),
      new SumTypeVariant("BossEnderVanish", AlgebraicType.createProductType([])),
      new SumTypeVariant("BossEnderLurk", AlgebraicType.createProductType([])),
      new SumTypeVariant("BossEnderTeleport", AlgebraicType.createProductType([])),
      new SumTypeVariant("BossEnderTransform", AlgebraicType.createProductType([])),
      new SumTypeVariant("Stationary", AlgebraicType.createProductType([])),
    ]);
  }

  export function serialize(writer: BinaryWriter, value: AiState): void {
      AiState.getTypeScriptAlgebraicType().serialize(writer, value);
  }

  export function deserialize(reader: BinaryReader): AiState {
      return AiState.getTypeScriptAlgebraicType().deserialize(reader);
  }

}

// The tagged union or sum type for the algebraic type `AiState`.
export type AiState = AiState.Default | AiState.BossEnderIdle | AiState.BossEnderChase | AiState.BossEnderDance | AiState.BossEnderVanish | AiState.BossEnderLurk | AiState.BossEnderTeleport | AiState.BossEnderTransform | AiState.Stationary;

export default AiState;

